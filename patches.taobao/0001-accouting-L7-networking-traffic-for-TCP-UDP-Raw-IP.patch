From: Zheng Liu <wenqing.lz@taobao.com>
Subject: [PATCH 1/2 v2] accounting L7 networking traffic for TCP/UDP/Raw-IP
Patch-mainline: in-house

Add per-process networking accouting.  'klog_net_accounting_enabled' is defined
in sysctl to switch on/off this feature.

Signed-off-by: Li Yu <bingtian.ly@taobao.com>
Signed-off-by: Zheng Liu <wenqing.lz@taobao.com>
---
v2 <- v1:
 rebase to latest master branch

Bingtian,

Could you please review this patch set?  Thanks!  BTW, IMO it seems that we
should import your iotop into rhel5-userspace in order to use this feature.

Regards,
Zheng

 include/linux/sched.h |    3 +++
 include/net/sock.h    |    9 +++++++++
 kernel/exit.c         |    7 +++++++
 kernel/fork.c         |    1 +
 kernel/sysctl.c       |   10 ++++++++++
 net/ipv4/raw.c        |    3 +++
 net/ipv4/tcp.c        |    8 +++++++-
 net/ipv4/udp.c        |   10 ++++++++--
 8 files changed, 48 insertions(+), 3 deletions(-)

--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1648,6 +1648,9 @@
 #endif
 #endif
 	struct ba_iocb *current_baiocb;
+
+	u64 rx_bytes;
+	u64 tx_bytes;
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1672,6 +1672,15 @@
 			     struct sock *sk,
 			     union skb_shared_tx *shtx);
 
+static inline void task_net_accounting_rx(unsigned int len)
+{
+	current->rx_bytes += len; /* Ignore PDU header */
+}
+
+static inline void task_net_accounting_tx(unsigned int len)
+{
+	current->tx_bytes += len; /* Ignore PDU header */
+}
 
 /**
  * sk_eat_skb - Release a skb if it is no longer needed
--- a/kernel/exit.c
+++ b/kernel/exit.c
@@ -57,6 +57,8 @@
 #include <asm/mmu_context.h>
 #include "cred-internals.h"
 
+int klog_net_accounting_enabled = 0;
+
 static void exit_mm(struct task_struct * tsk);
 
 static void __unhash_process(struct task_struct *p)
@@ -975,6 +977,11 @@
 	tsk->exit_code = code;
 	taskstats_exit(tsk, group_dead);
 
+	if (klog_net_accounting_enabled && (tsk->rx_bytes || tsk->tx_bytes))
+		printk(KERN_INFO "pid=%d tgid=%d comm=%s rx_bytes=%llu "
+				 "tx_bytes=%llu\n", tsk->pid, tsk->tgid,
+				 tsk->comm, tsk->rx_bytes, tsk->tx_bytes);
+
 	exit_mm(tsk);
 
 	if (group_dead)
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1128,6 +1128,7 @@
 	p->default_timer_slack_ns = current->timer_slack_ns;
 
 	task_io_accounting_init(&p->ioac);
+	p->rx_bytes = p->tx_bytes = 0;
 	acct_clear_integrals(p);
 
 	posix_cpu_timers_init(p);
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -127,6 +127,8 @@
 extern int blk_iopoll_enabled;
 #endif
 
+extern int klog_net_accounting_enabled;
+
 /* Constants used for minimum and  maximum */
 #ifdef CONFIG_LOCKUP_DETECTOR
 static int sixty = 60;
@@ -1159,6 +1161,14 @@
 		.proc_handler	= &proc_dointvec,
 	},
 #endif
+	{
+		.ctl_name	= CTL_UNNUMBERED,
+		.procname	= "klog_net_accounting",
+		.data		= &klog_net_accounting_enabled,
+		.maxlen		= sizeof(int),
+		.mode		= 0644,
+		.proc_handler	= &proc_dointvec,
+	},
 /*
  * NOTE: do not add new entries to this table unless you have read
  * Documentation/sysctl/ctl_unnumbered.txt
--- a/net/ipv4/raw.c
+++ b/net/ipv4/raw.c
@@ -603,6 +603,7 @@
 out:
 	if (err < 0)
 		return err;
+	task_net_accounting_tx(len);
 	return len;
 
 do_confirm:
@@ -710,6 +711,8 @@
 out:
 	if (err)
 		return err;
+	if (!(flags & MSG_PEEK))
+		task_net_accounting_rx(copied);
 	return copied;
 }
 
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -672,8 +672,10 @@
 
 	release_sock(sk);
 
-	if (spliced)
+	if (spliced) {
+		task_net_accounting_rx(spliced);
 		return spliced;
+	}
 
 	return ret;
 }
@@ -849,6 +851,7 @@
 out:
 	if (copied)
 		tcp_push(sk, flags, mss_now, tp->nonagle);
+	task_net_accounting_tx(copied);
 	return copied;
 
 do_error:
@@ -1101,6 +1104,7 @@
 		tcp_push(sk, flags, mss_now, tp->nonagle);
 	TCP_CHECK_TIMER(sk);
 	release_sock(sk);
+	task_net_accounting_tx(copied);
 	return copied;
 
 do_fault:
@@ -1740,6 +1744,8 @@
 
 	TCP_CHECK_TIMER(sk);
 	release_sock(sk);
+	if (!(flags & MSG_PEEK))
+		task_net_accounting_rx(copied);
 	return copied;
 
 out:
--- a/net/ipv4/udp.c
+++ b/net/ipv4/udp.c
@@ -801,8 +801,10 @@
 	ip_rt_put(rt);
 	if (free)
 		kfree(ipc.opt);
-	if (!err)
+	if (!err) {
+		task_net_accounting_tx(len);
 		return len;
+	}
 	/*
 	 * ENOBUFS = no kernel mem, SOCK_NOSPACE = no sndbuf space.  Reporting
 	 * ENOBUFS might not be good (it's not tunable per se), but otherwise
@@ -866,8 +868,10 @@
 	up->len += size;
 	if (!(up->corkflag || (flags&MSG_MORE)))
 		ret = udp_push_pending_frames(sk);
-	if (!ret)
+	if (!ret) {
 		ret = size;
+		task_net_accounting_tx(size);
+	}
 out:
 	release_sock(sk);
 	return ret;
@@ -1027,6 +1031,8 @@
 		ip_cmsg_recv(msg, skb);
 
 	err = copied;
+	if (!(flags & MSG_PEEK))
+		task_net_accounting_rx(copied);
 	if (flags & MSG_TRUNC)
 		err = ulen;
 
