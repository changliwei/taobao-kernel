From c7064ef13b2181a489836349f9baf87df0dab28f Mon Sep 17 00:00:00 2001
From: Jiaying Zhang <jiayingz@google.com>
Date: Tue, 2 Mar 2010 13:28:44 -0500
Subject: [PATCH 1/8] ext4: mechanical rename some of the direct I/O get_block's identifiers
Patch-mainline: v2.6.33-rc8-24-gc7064ef
Reference: c7064ef13b2181a489836349f9baf87df0dab28f

This commit renames some of the direct I/O's block allocation flags,
variables, and functions introduced in Mingming's "Direct IO for holes
and fallocate" patches so that they can be used by ext4's buffered
write path as well.  Also changed the related function comments
accordingly to cover both direct write and buffered write cases.

[Note from Zheng Liu]
Actually, I don't rename any identifiers in order to avoid merge conflicts as
much as possible.  So in this patch, some flags are changed according to
original patch.

Signed-off-by: Jiaying Zhang <jiayingz@google.com>
Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
Signed-off-by: Zheng Liu <wenqing.lz@taobao.com>
---
 fs/ext4/extents.c |   10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

--- a/fs/ext4/extents.c
+++ b/fs/ext4/extents.c
@@ -1718,7 +1718,7 @@ int ext4_ext_insert_extent(handle_t *han
 	}
 
 	/* try to insert block into found extent and return */
-	if (ex && (flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT)
+	if (ex && (flag != EXT4_GET_BLOCKS_DIO)
 		&& ext4_can_extents_be_merged(inode, ex, newext)) {
 		ext_debug("append [%d]%d block to %d:[%d]%d (from %llu)\n",
 				ext4_ext_is_uninitialized(newext),
@@ -1839,7 +1839,7 @@ has_space:
 
 merge:
 	/* try to merge extents to the right */
-	if (flag != EXT4_GET_BLOCKS_DIO_CREATE_EXT)
+	if (flag != EXT4_GET_BLOCKS_DIO)
 		ext4_ext_try_to_merge(inode, path, nearex);
 
 	/* try to merge extents to the left */
@@ -3511,7 +3511,7 @@ ext4_ext_handle_uninitialized_extents(ha
 			allocated, newblock);
 
 	/* DIO get_block() before submit the IO, split the extent */
-	if (flags == EXT4_GET_BLOCKS_DIO_CREATE_EXT) {
+	if (flags == EXT4_GET_BLOCKS_DIO) {
 		ret = ext4_split_unwritten_extents(handle,
 						inode, path, map->m_lblk,
 						map->m_len, flags);
@@ -3528,7 +3528,7 @@ ext4_ext_handle_uninitialized_extents(ha
 		goto out;
 	}
 	/* async DIO end_io complete, convert the filled extent to written */
-	if (flags == EXT4_GET_BLOCKS_DIO_CONVERT_EXT) {
+	if (flags == EXT4_GET_BLOCKS_CONVERT) {
 		ret = ext4_convert_unwritten_extents_dio(handle, inode,
 							path);
 		if (ret >= 0) {
@@ -3991,7 +3991,7 @@ got_allocated_blocks:
 		 * For non asycn direct IO case, flag the inode state
 		 * that we need to perform convertion when IO is done.
 		 */
-		if (flags == EXT4_GET_BLOCKS_DIO_CREATE_EXT) {
+		if (flags == EXT4_GET_BLOCKS_DIO) {
 			if (io && (io->flag != DIO_AIO_UNWRITTEN)) {
 				io->flag = DIO_AIO_UNWRITTEN;
 				atomic_inc(&EXT4_I(inode)->i_aiodio_unwritten);
