From 5dee54372c1ea15ab482b959634cda8c01b042bd Mon Sep 17 00:00:00 2001
From: Theodore Ts'o <tytso@mit.edu>
Date: Fri, 9 Sep 2011 19:10:51 -0400
Subject: [PATCH 20/26] ext4: rename ext4_count_free_blocks() to ext4_count_free_clusters()
Patch-mainline: 3.2

This function really counts the free clusters reported in the block
group descriptors, so rename it to reduce confusion.

Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
Signed-off-by: Robin Dong <sanbai@taobao.com>
---
Index: linux-2.6.32-220.2.1.el5/fs/ext4/balloc.c
===================================================================
--- linux-2.6.32-220.2.1.el5.orig/fs/ext4/balloc.c	2012-02-24 11:57:21.142036982 +0800
+++ linux-2.6.32-220.2.1.el5/fs/ext4/balloc.c	2012-02-24 11:57:24.498053754 +0800
@@ -595,12 +595,12 @@
 	return EXT4_NUM_B2C(sbi, num);
 }
 /**
- * ext4_count_free_blocks() -- count filesystem free blocks
+ * ext4_count_free_clusters() -- count filesystem free clusters
  * @sb:		superblock
  *
- * Adds up the number of free blocks from each block group.
+ * Adds up the number of free clusters from each block group.
  */
-ext4_fsblk_t ext4_count_free_blocks(struct super_block *sb)
+ext4_fsblk_t ext4_count_free_clusters(struct super_block *sb)
 {
 	ext4_fsblk_t desc_count;
 	struct ext4_group_desc *gdp;
@@ -633,8 +633,9 @@
 		bitmap_count += x;
 	}
 	brelse(bitmap_bh);
-	printk(KERN_DEBUG "ext4_count_free_blocks: stored = %llu"
-		", computed = %llu, %llu\n", ext4_free_blocks_count(es),
+	printk(KERN_DEBUG "ext4_count_free_clusters: stored = %llu"
+	       ", computed = %llu, %llu\n",
+	       EXT4_B2C(sbi, ext4_free_blocks_count(es)),
 	       desc_count, bitmap_count);
 	return bitmap_count;
 #else
Index: linux-2.6.32-220.2.1.el5/fs/ext4/ext4.h
===================================================================
--- linux-2.6.32-220.2.1.el5.orig/fs/ext4/ext4.h	2012-02-24 11:57:21.142036982 +0800
+++ linux-2.6.32-220.2.1.el5/fs/ext4/ext4.h	2012-02-24 11:57:24.498053754 +0800
@@ -1625,7 +1625,7 @@
 extern int ext4_has_free_blocks(struct ext4_sb_info *sbi, s64 nblocks);
 extern void ext4_free_blocks(handle_t *handle, struct inode *inode,
 			ext4_fsblk_t block, unsigned long count, int metadata);
-extern ext4_fsblk_t ext4_count_free_blocks(struct super_block *);
+extern ext4_fsblk_t ext4_count_free_clusters(struct super_block *);
 extern void ext4_check_blocks_bitmap(struct super_block *);
 extern struct ext4_group_desc * ext4_get_group_desc(struct super_block * sb,
 						    ext4_group_t block_group,
Index: linux-2.6.32-220.2.1.el5/fs/ext4/inode.c
===================================================================
--- linux-2.6.32-220.2.1.el5.orig/fs/ext4/inode.c	2012-02-24 11:57:16.362013399 +0800
+++ linux-2.6.32-220.2.1.el5/fs/ext4/inode.c	2012-02-24 11:57:24.502053771 +0800
@@ -2277,7 +2277,8 @@
 {
 	struct ext4_sb_info *sbi = EXT4_SB(inode->i_sb);
 	printk(KERN_CRIT "Total free blocks count %lld\n",
-	       ext4_count_free_blocks(inode->i_sb));
+	       EXT4_C2B(EXT4_SB(inode->i_sb),
+			ext4_count_free_clusters(inode->i_sb)));
 	printk(KERN_CRIT "Free/Dirty block details\n");
 	printk(KERN_CRIT "free_blocks=%lld\n",
 	       (long long) EXT4_C2B(EXT4_SB(inode->i_sb),
@@ -2366,7 +2367,7 @@
 			return 0;
 
 		if (err == -ENOSPC &&
-		    ext4_count_free_blocks(mpd->inode->i_sb)) {
+		    ext4_count_free_clusters(mpd->inode->i_sb)) {
 			mpd->retval = err;
 			return 0;
 		}
Index: linux-2.6.32-220.2.1.el5/fs/ext4/super.c
===================================================================
--- linux-2.6.32-220.2.1.el5.orig/fs/ext4/super.c	2012-02-24 11:57:21.142036970 +0800
+++ linux-2.6.32-220.2.1.el5/fs/ext4/super.c	2012-02-24 11:57:24.502053771 +0800
@@ -1990,7 +1990,8 @@
 	if (NULL != first_not_zeroed)
 		*first_not_zeroed = grp;
 
-	ext4_free_blocks_count_set(sbi->s_es, ext4_count_free_blocks(sb));
+	ext4_free_blocks_count_set(sbi->s_es,
+				   EXT4_C2B(sbi, ext4_count_free_clusters(sb)));
 	sbi->s_es->s_free_inodes_count =cpu_to_le32(ext4_count_free_inodes(sb));
 	return 1;
 }
@@ -3423,7 +3424,7 @@
 no_journal:
 
 	err = percpu_counter_init(&sbi->s_freeclusters_counter,
-				  ext4_count_free_blocks(sb));
+				  ext4_count_free_clusters(sb));
 	if (!err)
 		err = percpu_counter_init(&sbi->s_freeinodes_counter,
 					  ext4_count_free_inodes(sb));
