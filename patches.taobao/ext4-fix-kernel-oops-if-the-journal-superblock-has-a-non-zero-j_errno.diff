commit 7f93cff90fa9be6ed45f6189e136153d1d8631b0
From: Theodore Ts'o <tytso@mit.edu>
Date:   Wed Oct 27 21:30:13 2010 -0400
Subject: ext4: fix kernel oops if the journal superblock has a non-zero j_errno
Patch-mainline: 2.6.37
    
    Commit 84061e0 fixed an accounting bug only to introduce the
    possibility of a kernel OOPS if the journal has a non-zero j_errno
    field indicating that the file system had detected a fs inconsistency.
    After the journal replay, if the journal superblock indicates that the
    file system has an error, this indication is transfered to the file
    system and then ext4_commit_super() is called to write this to the
    disk.
    
    But since the percpu counters are now initialized after the journal
    replay, the call to ext4_commit_super() will cause a kernel oops since
    it needs to use the percpu counters the ext4 superblock structure.
    
    The fix is to skip setting the ext4 free block and free inode fields
    if the percpu counter has not been set.
    
    Thanks to Ken Sumrall for reporting and analyzing the root causes of
    this bug.
    
    Addresses-Google-Bug: #3054080
    
Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
Signed-off-by: Coly Li <bosong.ly@taobao.com>
---
Index: linux-2.6.32-220.0.0.el5/fs/ext4/super.c
===================================================================
--- linux-2.6.32-220.0.0.el5.orig/fs/ext4/super.c	2011-12-13 14:18:15.955927627 +0800
+++ linux-2.6.32-220.0.0.el5/fs/ext4/super.c	2011-12-13 14:19:58.476436000 +0800
@@ -3789,9 +3789,12 @@
 		cpu_to_le64(EXT4_SB(sb)->s_kbytes_written + 
 			    ((part_stat_read(sb->s_bdev->bd_part, sectors[1]) -
 			      EXT4_SB(sb)->s_sectors_written_start) >> 1));
-	ext4_free_blocks_count_set(es, percpu_counter_sum_positive(
+	if (percpu_counter_initialized(&EXT4_SB(sb)->s_freeblocks_counter))
+		ext4_free_blocks_count_set(es, percpu_counter_sum_positive(
 					&EXT4_SB(sb)->s_freeblocks_counter));
-	es->s_free_inodes_count = cpu_to_le32(percpu_counter_sum_positive(
+	if (percpu_counter_initialized(&EXT4_SB(sb)->s_freeinodes_counter))
+		es->s_free_inodes_count =
+			cpu_to_le32(percpu_counter_sum_positive(
 					&EXT4_SB(sb)->s_freeinodes_counter));
 	sb->s_dirt = 0;
 	BUFFER_TRACE(sbh, "marking dirty");
Index: linux-2.6.32-220.0.0.el5/include/linux/percpu_counter.h
===================================================================
--- linux-2.6.32-220.0.0.el5.orig/include/linux/percpu_counter.h	2011-12-13 13:40:04.108562969 +0800
+++ linux-2.6.32-220.0.0.el5/include/linux/percpu_counter.h	2011-12-13 14:19:58.476436000 +0800
@@ -78,6 +78,11 @@
 	return 1;
 }
 
+static inline int percpu_counter_initialized(struct percpu_counter *fbc)
+{
+	return (fbc->counters != NULL);
+}
+
 #else
 
 struct percpu_counter {
@@ -140,6 +145,11 @@
 	return percpu_counter_read(fbc);
 }
 
+static inline int percpu_counter_initialized(struct percpu_counter *fbc)
+{
+	return 1;
+}
+
 #endif	/* CONFIG_SMP */
 
 static inline void percpu_counter_inc(struct percpu_counter *fbc)
