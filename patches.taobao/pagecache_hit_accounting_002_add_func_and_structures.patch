From 38b86b2c93a20e55fa84588b2127141105676e7a Mon Sep 17 00:00:00 2001
From: Liu Yuan <tailai.ly@taobao.com>
Date: Thu, 14 Apr 2011 21:22:22 +0800
Subject: [PATCH 2/4] block: Add functions and data types for Page Cache Accounting
Patch-mainline: in-house
References: 

These functions and data types are based on the percpu
disk stats infrastructure.

Signed-off-by: Liu Yuan <tailai.ly@taobao.com>
Signed-off-by: Tao Ma <boyu.mt@taobao.com>
Acked-by: 

---
 block/blk-sysfs.c             |    7 ++
 fs/partitions/check.c         |    4 +
 include/linux/genhd.h         |    5 +
 include/linux/pagecache_api.h |   18 ++++
 include/trace/events/mm.h     |   27 ++++++
 kernel/trace/Makefile         |    1 +
 kernel/trace/pagecache.c      |  193 +++++++++++++++++++++++++++++++++++++++++
 7 files changed, 255 insertions(+), 0 deletions(-)
 create mode 100644 include/linux/pagecache_api.h
 create mode 100644 include/trace/events/mm.h
 create mode 100644 kernel/trace/pagecache.c

Index: linux-2.6.32-220.0.0.el5/block/blk-sysfs.c
===================================================================
--- linux-2.6.32-220.0.0.el5.orig/block/blk-sysfs.c	2011-12-13 13:40:04.588565349 +0800
+++ linux-2.6.32-220.0.0.el5/block/blk-sysfs.c	2011-12-13 14:13:07.050395841 +0800
@@ -6,6 +6,7 @@
 #include <linux/bio.h>
 #include <linux/blkdev.h>
 #include <linux/blktrace_api.h>
+#include <linux/pagecache_api.h>
 
 #include "blk.h"
 
@@ -526,6 +527,10 @@
 	if (ret)
 		return ret;
 
+	ret = pagecache_trace_init_sysfs(dev);
+	if (ret)
+		return ret;
+
 	ret = kobject_add(&q->kobj, kobject_get(&dev->kobj), "%s", "queue");
 	if (ret < 0)
 		return ret;
@@ -540,6 +545,7 @@
 		kobject_uevent(&q->kobj, KOBJ_REMOVE);
 		kobject_del(&q->kobj);
 		blk_trace_remove_sysfs(disk_to_dev(disk));
+		pagecache_trace_remove_sysfs(dev);
 		return ret;
 	}
 
@@ -559,5 +565,6 @@
 	kobject_uevent(&q->kobj, KOBJ_REMOVE);
 	kobject_del(&q->kobj);
 	blk_trace_remove_sysfs(disk_to_dev(disk));
+	pagecache_trace_remove_sysfs(disk_to_dev(disk));
 	kobject_put(&disk_to_dev(disk)->kobj);
 }
Index: linux-2.6.32-220.0.0.el5/fs/partitions/check.c
===================================================================
--- linux-2.6.32-220.0.0.el5.orig/fs/partitions/check.c	2011-12-13 13:40:04.608565449 +0800
+++ linux-2.6.32-220.0.0.el5/fs/partitions/check.c	2011-12-13 14:13:07.050395841 +0800
@@ -20,6 +20,7 @@
 #include <linux/ctype.h>
 #include <linux/genhd.h>
 #include <linux/blktrace_api.h>
+#include <linux/pagecache_api.h>
 
 #include "check.h"
 
@@ -327,6 +328,9 @@
 #ifdef CONFIG_BLK_DEV_IO_TRACE
 	&blk_trace_attr_group,
 #endif
+#ifdef CONFIG_PAGE_CACHE_ACCT
+	&pagecache_trace_attr_group,
+#endif
 	NULL
 };
 
Index: linux-2.6.32-220.0.0.el5/include/linux/genhd.h
===================================================================
--- linux-2.6.32-220.0.0.el5.orig/include/linux/genhd.h	2011-12-13 13:40:04.572565267 +0800
+++ linux-2.6.32-220.0.0.el5/include/linux/genhd.h	2011-12-13 14:13:07.050395841 +0800
@@ -85,6 +85,11 @@
 	unsigned long ticks[2];
 	unsigned long io_ticks;
 	unsigned long time_in_queue;
+#ifdef CONFIG_PAGE_CACHE_ACCT
+	unsigned long page_cache_readpages;
+	unsigned long page_cache_hit[2];
+	unsigned long page_cache_missed[2];
+#endif
 };
 	
 struct hd_struct {
Index: linux-2.6.32-220.0.0.el5/include/linux/pagecache_api.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.32-220.0.0.el5/include/linux/pagecache_api.h	2011-12-13 14:13:07.050395841 +0800
@@ -0,0 +1,18 @@
+#ifndef PAGECACHE_API_H
+#define PAGECACHE_API_H
+
+#ifdef CONFIG_PAGE_CACHE_ACCT
+
+extern int pagecache_trace_init_sysfs(struct device *dev);
+extern void pagecache_trace_remove_sysfs(struct device *dev);
+extern struct attribute_group pagecache_trace_attr_group;
+
+#else /* !CONFIG_PAGE_CACHE_ACCT */
+# define pagecache_trace_remove_sysfs(dev)      do { } while (0)
+static inline int pagecache_trace_init_sysfs(struct device *dev)
+{
+	return 0;
+}
+
+#endif /* CONFIG_PAGE_CACHE_ACCT */
+#endif
Index: linux-2.6.32-220.0.0.el5/include/trace/events/mm.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.32-220.0.0.el5/include/trace/events/mm.h	2011-12-13 14:13:07.050395841 +0800
@@ -0,0 +1,27 @@
+#ifndef _TRACE_MM_H
+#define _TRACE_MM_H
+
+#include <linux/fs.h>
+#include <linux/tracepoint.h>
+
+DECLARE_TRACE(page_cache_acct_readpages,
+	TP_PROTO(struct super_block *sb, int nr_pages),
+	TP_ARGS(sb, nr_pages));
+
+DECLARE_TRACE(page_cache_acct_hits,
+	TP_PROTO(struct super_block *sb, int rw, int nr_pages),
+	TP_ARGS(sb, rw, nr_pages));
+
+DECLARE_TRACE(page_cache_acct_hit,
+	TP_PROTO(struct super_block *sb, int rw),
+	TP_ARGS(sb, rw));
+
+DECLARE_TRACE(page_cache_acct_misses,
+	TP_PROTO(struct super_block *sb, int rw, int nr_pages),
+	TP_ARGS(sb, rw, nr_pages));
+
+DECLARE_TRACE(page_cache_acct_miss,
+	TP_PROTO(struct super_block *sb, int rw),
+	TP_ARGS(sb, rw));
+
+#endif
Index: linux-2.6.32-220.0.0.el5/kernel/trace/Makefile
===================================================================
--- linux-2.6.32-220.0.0.el5.orig/kernel/trace/Makefile	2011-12-13 13:40:04.592565363 +0800
+++ linux-2.6.32-220.0.0.el5/kernel/trace/Makefile	2011-12-13 14:13:07.050395841 +0800
@@ -20,6 +20,7 @@
 # relied on by ptrace for example:
 #
 obj-y += trace_clock.o
+obj-y += pagecache.o
 
 obj-$(CONFIG_FUNCTION_TRACER) += libftrace.o
 obj-$(CONFIG_RING_BUFFER) += ring_buffer.o
Index: linux-2.6.32-220.0.0.el5/kernel/trace/pagecache.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.32-220.0.0.el5/kernel/trace/pagecache.c	2011-12-13 14:13:07.050395841 +0800
@@ -0,0 +1,192 @@
+#include <linux/genhd.h>
+#include <trace/events/mm.h>
+
+DEFINE_TRACE(page_cache_acct_hits);
+DEFINE_TRACE(page_cache_acct_misses);
+DEFINE_TRACE(page_cache_acct_hit);
+DEFINE_TRACE(page_cache_acct_miss);
+DEFINE_TRACE(page_cache_acct_readpages);
+
+#ifdef CONFIG_PAGE_CACHE_ACCT
+
+static bool pagecache_tracer_enabled __read_mostly;
+
+static void page_cache_acct_readpages(struct super_block *sb, int nr_pages)
+{
+	struct block_device *bdev = sb->s_bdev;
+	struct hd_struct *part;
+	int cpu;
+	if (likely(bdev) && likely(part = bdev->bd_part)) {
+		cpu = part_stat_lock();
+		part_stat_add(cpu, part, page_cache_readpages, nr_pages);
+		part_stat_unlock();
+	}
+}
+
+static inline void __page_cache_acct_hit(struct super_block *sb, int rw, int nr_pages)
+{
+	struct block_device *bdev = sb->s_bdev;
+	struct hd_struct *part;
+	int cpu;
+	if (likely(bdev) && likely(part = bdev->bd_part)) {
+		cpu = part_stat_lock();
+		part_stat_add(cpu, part, page_cache_hit[rw], nr_pages);
+		part_stat_unlock();
+	}
+}
+
+static void page_cache_acct_hit(struct super_block *sb, int rw)
+{
+	__page_cache_acct_hit(sb, rw, 1);
+}
+
+static void page_cache_acct_hits(struct super_block *sb ,int rw, int nr_pages)
+{
+	__page_cache_acct_hit(sb, rw, nr_pages);
+}
+
+static inline void __page_cache_acct_miss(struct super_block *sb, int rw, int nr_pages)
+{
+	struct block_device *bdev = sb->s_bdev;
+	struct hd_struct *part;
+	int cpu;
+	if (likely(bdev) && likely(part = bdev->bd_part)) {
+		cpu = part_stat_lock();
+		part_stat_add(cpu, part, page_cache_missed[rw], nr_pages);
+		part_stat_unlock();
+	}
+}
+
+static void page_cache_acct_miss(struct super_block *sb, int rw)
+{
+	__page_cache_acct_miss(sb, rw, 1);
+}
+
+static void page_cache_acct_misses(struct super_block *sb, int rw, int nr_pages)
+{
+	__page_cache_acct_miss(sb, rw, nr_pages);
+}
+
+static void pagecache_acct_setup(void)
+{
+	int ret;
+	if (pagecache_tracer_enabled)
+		return;
+
+	ret = register_trace_page_cache_acct_readpages(page_cache_acct_readpages);
+	WARN_ON(ret);
+	ret = register_trace_page_cache_acct_hit(page_cache_acct_hit);
+	WARN_ON(ret);
+	ret = register_trace_page_cache_acct_hits(page_cache_acct_hits);
+	WARN_ON(ret);
+	ret = register_trace_page_cache_acct_miss(page_cache_acct_miss);
+	WARN_ON(ret);
+	ret = register_trace_page_cache_acct_misses(page_cache_acct_misses);
+	WARN_ON(ret);
+
+	if (!ret)
+		pagecache_tracer_enabled = 1;
+}
+
+static void pagecache_acct_remove(void)
+{
+	unregister_trace_page_cache_acct_readpages(page_cache_acct_readpages);
+	unregister_trace_page_cache_acct_hit(page_cache_acct_hit);
+	unregister_trace_page_cache_acct_hits(page_cache_acct_hits);
+	unregister_trace_page_cache_acct_miss(page_cache_acct_miss);
+	unregister_trace_page_cache_acct_misses(page_cache_acct_misses);
+
+	pagecache_tracer_enabled = 0;
+	tracepoint_synchronize_unregister();
+}
+
+static ssize_t sysfs_pagecache_trace_attr_show(struct device *dev,
+                                        struct device_attribute *attr,
+                                        char *buf);
+
+static ssize_t sysfs_pagecache_trace_attr_store(struct device *dev,
+                                        struct device_attribute *attr,
+                                        const char *buf, size_t count);
+
+#define PAGECACHE_TRACE_DEVICE_ATTR(_name) \
+        DEVICE_ATTR(_name, S_IRUGO | S_IWUSR, \
+                    sysfs_pagecache_trace_attr_show, \
+                    sysfs_pagecache_trace_attr_store)
+
+static PAGECACHE_TRACE_DEVICE_ATTR(stat);
+static PAGECACHE_TRACE_DEVICE_ATTR(enable);
+
+static struct attribute *pagecache_trace_attrs[] = {
+	&dev_attr_stat.attr,
+	&dev_attr_enable.attr,
+	NULL
+};
+
+struct attribute_group pagecache_trace_attr_group = {
+	.name = "pagecache",
+	.attrs = pagecache_trace_attrs,
+};
+
+int pagecache_trace_init_sysfs(struct device *dev)
+{
+	return sysfs_create_group(&dev->kobj, &pagecache_trace_attr_group);
+}
+
+void pagecache_trace_remove_sysfs(struct device *dev)
+{
+	sysfs_remove_group(&dev->kobj, &pagecache_trace_attr_group);
+}
+
+static ssize_t sysfs_pagecache_trace_attr_show(struct device *dev,
+                                        struct device_attribute *attr,
+                                        char *buf)
+{
+	int ret = -EINVAL;
+
+	if (!pagecache_tracer_enabled) {
+		ret = sprintf(buf, "disabled\n");
+		goto out;
+	}
+	if (attr == &dev_attr_stat) {
+	       struct hd_struct  *p = dev_to_part(dev);
+
+	       ret = sprintf(buf,
+			       "%8lu %8lu %8lu %8lu %8lu\n",
+			       part_stat_read(p, page_cache_readpages),
+			       part_stat_read(p, page_cache_missed[READ]),
+			       part_stat_read(p, page_cache_hit[READ]),
+			       part_stat_read(p, page_cache_missed[WRITE]),
+			       part_stat_read(p, page_cache_hit[WRITE]));
+		goto out;
+	}
+	if (attr == &dev_attr_enable)
+		ret = sprintf(buf, "%u\n", pagecache_tracer_enabled);
+out:
+	return ret;
+}
+
+static ssize_t sysfs_pagecache_trace_attr_store(struct device *dev,
+                                        struct device_attribute *attr,
+                                        const char *buf, size_t count)
+{
+	u64 value;
+	ssize_t ret = -EINVAL;
+
+	if (count == 0)
+		goto out;
+	if (attr == &dev_attr_stat)
+		goto out;
+	if (attr == &dev_attr_enable) {
+		ret = sscanf(buf, "%llu", &value);
+		if (ret != 1)
+			goto out;
+		if (value)
+			pagecache_acct_setup();
+		else
+			pagecache_acct_remove();
+	}
+out:
+	return ret ? ret : count;
+}
+
+#endif
