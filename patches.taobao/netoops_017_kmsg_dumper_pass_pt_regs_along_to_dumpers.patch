From:   Mike Waychison <mikew@google.com>
Date:   Mon Apr 25 13:48:51 2011 +0800
Subject: [PATCH 17/24] kmsg_dumper: pass pt_regs along to dumpers.
Patch-mainline: linux-2.6.32-71.18.1.el6

Signed-off-by: Mike Waychison <mikew@google.com>
Signed-off-by: Robin Dong <sanbai@taobao.com>
---
Index: linux-2.6.32-279.2.1.el5/include/linux/kmsg_dump.h
===================================================================
--- linux-2.6.32-279.2.1.el5.orig/include/linux/kmsg_dump.h
+++ linux-2.6.32-279.2.1.el5/include/linux/kmsg_dump.h
@@ -14,6 +14,8 @@
 
 #include <linux/list.h>
 
+struct pt_regs;
+
 /*
  * Keep this list arranged in rough order of priority. Anything listed after
  * KMSG_DUMP_OOPS will not be logged by default unless printk.always_kmsg_dump
@@ -39,6 +41,7 @@ enum kmsg_dump_reason {
  */
 struct kmsg_dumper {
 	void (*dump)(struct kmsg_dumper *dumper, enum kmsg_dump_reason reason,
+			struct pt_regs *pt_regs,
 			const char *s1, unsigned long l1,
 			const char *s2, unsigned long l2);
 	struct list_head list;
@@ -46,13 +49,13 @@ struct kmsg_dumper {
 };
 
 #ifdef CONFIG_PRINTK
-void kmsg_dump(enum kmsg_dump_reason reason);
+void kmsg_dump(enum kmsg_dump_reason reason, struct pt_regs *pt_regs);
 
 int kmsg_dump_register(struct kmsg_dumper *dumper);
 
 int kmsg_dump_unregister(struct kmsg_dumper *dumper);
 #else
-static inline void kmsg_dump(enum kmsg_dump_reason reason)
+static inline void kmsg_dump(enum kmsg_dump_reason reason, struct pt_regs *pt_regs)
 {
 }
 
Index: linux-2.6.32-279.2.1.el5/kernel/kexec.c
===================================================================
--- linux-2.6.32-279.2.1.el5.orig/kernel/kexec.c
+++ linux-2.6.32-279.2.1.el5/kernel/kexec.c
@@ -1096,10 +1096,11 @@ void crash_kexec(struct pt_regs *regs)
 		if (kexec_crash_image) {
 			struct pt_regs fixed_regs;
 
-			kmsg_dump(KMSG_DUMP_KEXEC);
-
 			crash_setup_regs(&fixed_regs, regs);
 			crash_save_vmcoreinfo();
+
+			kmsg_dump(KMSG_DUMP_KEXEC, &fixed_regs);
+
 			machine_crash_shutdown(&fixed_regs);
 			machine_kexec(kexec_crash_image);
 		}
Index: linux-2.6.32-279.2.1.el5/kernel/panic.c
===================================================================
--- linux-2.6.32-279.2.1.el5.orig/kernel/panic.c
+++ linux-2.6.32-279.2.1.el5/kernel/panic.c
@@ -100,7 +100,7 @@ NORET_TYPE void panic(const char * fmt, 
 	 */
 	crash_kexec(NULL);
 
-	kmsg_dump(KMSG_DUMP_PANIC);
+	kmsg_dump(KMSG_DUMP_PANIC, NULL);
 
 	/*
 	 * Note smp_send_stop is the usual smp shutdown function, which
@@ -386,7 +386,7 @@ void oops_exit(struct pt_regs *regs)
 {
 	do_oops_enter_exit();
 	print_oops_end_marker();
-	kmsg_dump(KMSG_DUMP_OOPS);
+	kmsg_dump(KMSG_DUMP_OOPS, regs);
 }
 
 #ifdef WANT_WARN_ON_SLOWPATH
Index: linux-2.6.32-279.2.1.el5/kernel/printk.c
===================================================================
--- linux-2.6.32-279.2.1.el5.orig/kernel/printk.c
+++ linux-2.6.32-279.2.1.el5/kernel/printk.c
@@ -1534,7 +1534,7 @@ static const char *kmsg_to_str(enum kmsg
  * Iterate through each of the dump devices and call the oops/panic
  * callbacks with the log buffer.
  */
-void kmsg_dump(enum kmsg_dump_reason reason)
+void kmsg_dump(enum kmsg_dump_reason reason, struct pt_regs *pt_regs)
 {
 	unsigned long end;
 	unsigned chars;
@@ -1574,7 +1574,7 @@ void kmsg_dump(enum kmsg_dump_reason rea
 		return;
 	}
 	list_for_each_entry(dumper, &dump_list, list)
-		dumper->dump(dumper, reason, s1, l1, s2, l2);
+		dumper->dump(dumper, reason, pt_regs, s1, l1, s2, l2);
 	spin_unlock_irqrestore(&dump_list_lock, flags);
 }
 #endif
Index: linux-2.6.32-279.2.1.el5/fs/pstore/platform.c
===================================================================
--- linux-2.6.32-279.2.1.el5.orig/fs/pstore/platform.c
+++ linux-2.6.32-279.2.1.el5/fs/pstore/platform.c
@@ -95,7 +95,7 @@ static const char *get_reason_str(enum k
  * as we can from the end of the buffer.
  */
 static void pstore_dump(struct kmsg_dumper *dumper,
-	    enum kmsg_dump_reason reason,
+	    enum kmsg_dump_reason reason, struct pt_regs *pt_regs,
 	    const char *s1, unsigned long l1,
 	    const char *s2, unsigned long l2)
 {
Index: linux-2.6.32-279.2.1.el5/kernel/sys.c
===================================================================
--- linux-2.6.32-279.2.1.el5.orig/kernel/sys.c
+++ linux-2.6.32-279.2.1.el5/kernel/sys.c
@@ -282,7 +282,7 @@ out_unlock:
  */
 void emergency_restart(void)
 {
-	kmsg_dump(KMSG_DUMP_EMERG);
+	kmsg_dump(KMSG_DUMP_EMERG, NULL);
 	machine_emergency_restart();
 }
 EXPORT_SYMBOL_GPL(emergency_restart);
@@ -310,7 +310,7 @@ void kernel_restart(char *cmd)
 		printk(KERN_EMERG "Restarting system.\n");
 	else
 		printk(KERN_EMERG "Restarting system with command '%s'.\n", cmd);
-	kmsg_dump(KMSG_DUMP_RESTART);
+	kmsg_dump(KMSG_DUMP_RESTART, NULL);
 	machine_restart(cmd);
 }
 EXPORT_SYMBOL_GPL(kernel_restart);
@@ -332,7 +332,7 @@ void kernel_halt(void)
 	kernel_shutdown_prepare(SYSTEM_HALT);
 	sysdev_shutdown();
 	printk(KERN_EMERG "System halted.\n");
-	kmsg_dump(KMSG_DUMP_HALT);
+	kmsg_dump(KMSG_DUMP_HALT, NULL);
 	machine_halt();
 }
 
@@ -351,7 +351,7 @@ void kernel_power_off(void)
 	disable_nonboot_cpus();
 	sysdev_shutdown();
 	printk(KERN_EMERG "Power down.\n");
-	kmsg_dump(KMSG_DUMP_POWEROFF);
+	kmsg_dump(KMSG_DUMP_POWEROFF, NULL);
 	machine_power_off();
 }
 EXPORT_SYMBOL_GPL(kernel_power_off);
