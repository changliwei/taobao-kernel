From a9a5da722a12ec17d6befa72961ce525aea3550a Mon Sep 17 00:00:00 2001
From: Tao Ma <boyu.mt@taobao.com>
Date: Fri, 16 Dec 2011 10:45:41 +0800
Subject: [PATCH 04/22] ext4: Add read support for inline data.
Patch-mainline: in-house

Let readpage and readpages handle the case when we
want to read an inlined file.

Signed-off-by: Tao Ma <boyu.mt@taobao.comc.
---
Index: linux-2.6.32-220.23.1.el5/fs/ext4/inline.c
===================================================================
--- linux-2.6.32-220.23.1.el5.orig/fs/ext4/inline.c	2012-06-20 00:08:29.975328682 +0800
+++ linux-2.6.32-220.23.1.el5/fs/ext4/inline.c	2012-06-20 00:08:33.827347783 +0800
@@ -437,6 +437,58 @@
 	return error;
 }
 
+static int ext4_read_inline_page(struct inode *inode, struct page *page)
+{
+	void *kaddr;
+	loff_t size;
+	int ret = 0;
+	struct ext4_iloc iloc;
+
+	BUG_ON(!PageLocked(page));
+	BUG_ON(!ext4_has_inline_data(inode));
+
+	size = i_size_read(inode);
+
+	if (size > PAGE_CACHE_SIZE ||
+	    size > ext4_get_inline_size(inode)) {
+		ext4_error_inode(__func__, inode,
+			"bad size %ld for a inline file", (long)size);
+		return -EROFS;
+	}
+
+	if (!EXT4_I(inode)->i_inline_off) {
+		ext4_warning(inode->i_sb, "inode %lu doesn't have inline data.",
+			     inode->i_ino);
+		goto out;
+	}
+
+	ret = ext4_get_inode_loc(inode, &iloc);
+	if (ret)
+		goto out;
+
+	kaddr = kmap_atomic(page, KM_USER0);
+	ret = ext4_read_inline_data(inode, kaddr, size, &iloc);
+	flush_dcache_page(page);
+	kunmap_atomic(kaddr, KM_USER0);
+	SetPageUptodate(page);
+	brelse(iloc.bh);
+
+out:
+	return ret;
+}
+
+int ext4_readpage_inline(struct inode *inode, struct page *page)
+{
+	int ret;
+
+	down_read(&EXT4_I(inode)->xattr_sem);
+	ret = ext4_read_inline_page(inode, page);
+	up_read(&EXT4_I(inode)->xattr_sem);
+
+	unlock_page(page);
+	return ret >= 0 ? 0 : ret;
+}
+
 int ext4_destroy_inline_data(handle_t *handle, struct inode *inode)
 {
 	int ret;
Index: linux-2.6.32-220.23.1.el5/fs/ext4/inode.c
===================================================================
--- linux-2.6.32-220.23.1.el5.orig/fs/ext4/inode.c	2012-06-20 00:08:29.975328682 +0800
+++ linux-2.6.32-220.23.1.el5/fs/ext4/inode.c	2012-06-20 00:08:33.827347783 +0800
@@ -1475,6 +1475,9 @@
 		started = 1;
 	}
 
+	if (ext4_has_inline_data(inode))
+		return -ERANGE;
+
 	map.m_lblk = iblock;
 	map.m_len = max_blocks;
 	ret = ext4_get_blocks(handle, inode, &map, bh_result,
@@ -3594,6 +3597,12 @@
 	journal_t *journal;
 	int err;
 
+	/*
+	 * XXX: Can we arrive here for a inline file? Maybe not.
+	 */
+	if (ext4_has_inline_data(inode))
+		return 0;
+
 	if (mapping_tagged(mapping, PAGECACHE_TAG_DIRTY) &&
 			test_opt(inode->i_sb, DELALLOC)) {
 		/*
@@ -3639,6 +3648,11 @@
 
 static int ext4_readpage(struct file *file, struct page *page)
 {
+	struct inode *inode = page->mapping->host;
+
+	if (ext4_has_inline_data(inode))
+		return ext4_readpage_inline(inode, page);
+
 	return mpage_readpage(page, ext4_get_block);
 }
 
@@ -3646,6 +3660,12 @@
 ext4_readpages(struct file *file, struct address_space *mapping,
 		struct list_head *pages, unsigned nr_pages)
 {
+	struct inode *inode = mapping->host;
+
+	/* If the file has inline data, no need to do readpages. */
+	if (ext4_has_inline_data(inode))
+		return 0;
+
 	return mpage_readpages(mapping, pages, nr_pages, ext4_get_block);
 }
 
@@ -4168,6 +4188,10 @@
 	struct file *file = iocb->ki_filp;
 	struct inode *inode = file->f_mapping->host;
 
+	/* Let buffer I/O handle the inline data case. */
+	if (ext4_has_inline_data(inode))
+		return 0;
+
 	if (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS))
 		return ext4_ext_direct_IO(rw, iocb, iov, offset, nr_segs);
 
Index: linux-2.6.32-220.23.1.el5/fs/ext4/xattr.h
===================================================================
--- linux-2.6.32-220.23.1.el5.orig/fs/ext4/xattr.h	2012-06-20 00:08:29.975328682 +0800
+++ linux-2.6.32-220.23.1.el5/fs/ext4/xattr.h	2012-06-20 00:08:33.827347783 +0800
@@ -137,6 +137,8 @@
 extern int ext4_init_inline_data(handle_t *handle, struct inode *inode,
 				 unsigned int len);
 extern int ext4_destroy_inline_data(handle_t *handle, struct inode *inode);
+
+extern int ext4_readpage_inline(struct inode *inode, struct page *page);
 # else  /* CONFIG_EXT4_FS_XATTR */
 
 static inline int
@@ -252,6 +254,11 @@
 {
 	return 0;
 }
+
+static inline int ext4_readpage_inline(struct inode *inode, struct page *page)
+{
+	return 0;
+}
 # endif  /* CONFIG_EXT4_FS_XATTR */
 
 #ifdef CONFIG_EXT4_FS_SECURITY
