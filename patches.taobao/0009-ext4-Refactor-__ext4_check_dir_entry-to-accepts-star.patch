From 23573143717aa4adbbb62db255c0114df53dc5ce Mon Sep 17 00:00:00 2001
From: Tao Ma <boyu.mt@taobao.com>
Date: Wed, 26 Oct 2011 13:14:47 +0800
Subject: [PATCH 09/22] ext4: Refactor __ext4_check_dir_entry to accepts start and size.
Patch-mainline: in-house

__ext4_check_dir_entry is used to check whether the de is over
the block boundary. Now with inline data, it could be within the
block boundary while exceeds the inode size. So check this function
to check the overflow more precisely.

Signed-off-by: Tao Ma <boyu.mt@taobao.com>
---
diff --git a/fs/ext4/dir.c b/fs/ext4/dir.c
index 27c4b59..d4bbbf9 100644
--- a/fs/ext4/dir.c
+++ b/fs/ext4/dir.c
@@ -63,7 +63,7 @@ static unsigned char get_dtype(struct super_block *sb, int filetype)
 
 int ext4_check_dir_entry(const char *function, struct inode *dir,
 			 struct ext4_dir_entry_2 *de,
-			 struct buffer_head *bh,
+			 struct buffer_head *bh, char *buf, int size,
 			 unsigned int offset)
 {
 	const char *error_msg = NULL;
@@ -76,23 +76,23 @@ int ext4_check_dir_entry(const char *function, struct inode *dir,
 		error_msg = "rec_len % 4 != 0";
 	else if (unlikely(rlen < EXT4_DIR_REC_LEN(de->name_len)))
 		error_msg = "rec_len is too small for name_len";
-	else if (unlikely(((char *) de - bh->b_data) + rlen > dir->i_sb->s_blocksize))
-		error_msg = "directory entry across blocks";
+	else if (unlikely(((char *) de - buf) + rlen > size))
+		error_msg = "directory entry across range";
 	else if (unlikely(le32_to_cpu(de->inode) >
 			le32_to_cpu(EXT4_SB(dir->i_sb)->s_es->s_inodes_count)))
 		error_msg = "inode out of bounds";
 	else
-		return 1;
+		return 0;
 
 	__ext4_error(dir->i_sb, function,
 		"bad entry in directory #%lu: %s - block=%llu"
 		"offset=%u(%u), inode=%u, rec_len=%d, name_len=%d",
 		dir->i_ino, error_msg, 
 		(unsigned long long) bh->b_blocknr,     
-		(unsigned) (offset%bh->b_size), offset,
+		(unsigned) (offset%size), offset,
 		le32_to_cpu(de->inode),
 		rlen, de->name_len);
-	return 0;
+	return 1;
 }
 
 static int ext4_readdir(struct file *filp,
@@ -200,8 +200,9 @@ revalidate:
 		while (!error && filp->f_pos < inode->i_size
 		       && offset < sb->s_blocksize) {
 			de = (struct ext4_dir_entry_2 *) (bh->b_data + offset);
-			if (!ext4_check_dir_entry("ext4_readdir", inode, de,
-						  bh, offset)) {
+			if (ext4_check_dir_entry("ext4_readdir", inode, de,
+						  bh, bh->b_data, bh->b_size,
+						  offset)) {
 				/*
 				 * On error, skip the f_pos to the next block
 				 */
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 2cd014c..ecb8335 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -1657,7 +1657,8 @@ extern unsigned ext4_num_overhead_clusters(struct super_block *sb,
 /* dir.c */
 extern int ext4_check_dir_entry(const char *, struct inode *,
 				struct ext4_dir_entry_2 *,
-				struct buffer_head *, unsigned int);
+				struct buffer_head *, char *buf, int,
+				unsigned int);
 extern int ext4_htree_store_dirent(struct file *dir_file, __u32 hash,
 				    __u32 minor_hash,
 				    struct ext4_dir_entry_2 *dirent);
diff --git a/fs/ext4/namei.c b/fs/ext4/namei.c
index 4856746..756fb8a 100644
--- a/fs/ext4/namei.c
+++ b/fs/ext4/namei.c
@@ -581,7 +581,8 @@ static int htree_dirblock_to_tree(struct file *dir_file,
 					   dir->i_sb->s_blocksize -
 					   EXT4_DIR_REC_LEN(0));
 	for (; de < top; de = ext4_next_entry(de, dir->i_sb->s_blocksize)) {
-		if (!ext4_check_dir_entry("htree_dirblock_to_tree", dir, de, bh,
+		if (ext4_check_dir_entry("htree_dirblock_to_tree", dir, de, bh,
+					bh->b_data, bh->b_size,
 					(block<<EXT4_BLOCK_SIZE_BITS(dir->i_sb))
 						+((char *)de - bh->b_data))) {
 			/* On error, skip the f_pos to the next block. */
@@ -820,8 +821,9 @@ static inline int search_dirblock(struct buffer_head *bh,
 		if ((char *) de + namelen <= dlimit &&
 		    ext4_match (namelen, name, de)) {
 			/* found a match - just to be sure, do a full check */
-			if (!ext4_check_dir_entry("ext4_find_entry",
-						  dir, de, bh, offset))
+			if (ext4_check_dir_entry("ext4_find_entry",
+						  dir, de, bh, bh->b_data,
+						  bh->b_size, offset))
 				return -1;
 			*res_dir = de;
 			return 1;
@@ -995,7 +997,8 @@ static struct buffer_head * ext4_dx_find_entry(struct inode *dir, const struct q
 			int off = (block << EXT4_BLOCK_SIZE_BITS(sb))
 				  + ((char *) de - bh->b_data);
 
-			if (!ext4_check_dir_entry(__func__, dir, de, bh, off)) {
+			if (ext4_check_dir_entry(__func__, dir, de, bh,
+						bh->b_data, bh->b_size, off)) {
 				brelse(bh);
 				*err = ERR_BAD_DX_DIR;
 				goto errout;
@@ -1281,8 +1284,9 @@ static int add_dirent_to_buf(handle_t *handle, struct dentry *dentry,
 		de = (struct ext4_dir_entry_2 *)bh->b_data;
 		top = bh->b_data + blocksize - reclen;
 		while ((char *) de <= top) {
-			if (!ext4_check_dir_entry("ext4_add_entry", dir, de,
-						  bh, offset))
+			if (ext4_check_dir_entry("ext4_add_entry", dir, de,
+						  bh, bh->b_data, bh->b_size,
+						  offset))
 				return -EIO;
 			if (ext4_match(namelen, name, de))
 				return -EEXIST;
@@ -1651,7 +1655,8 @@ static int ext4_delete_entry(handle_t *handle,
 	pde = NULL;
 	de = (struct ext4_dir_entry_2 *) bh->b_data;
 	while (i < bh->b_size) {
-		if (!ext4_check_dir_entry("ext4_delete_entry", dir, de, bh, i))
+		if (ext4_check_dir_entry("ext4_delete_entry", dir, de, bh,
+					bh->b_data, bh->b_size, i))
 			return -EIO;
 		if (de == de_del)  {
 			BUFFER_TRACE(bh, "get_write_access");
@@ -1949,7 +1954,8 @@ static int empty_dir(struct inode *inode)
 			}
 			de = (struct ext4_dir_entry_2 *) bh->b_data;
 		}
-		if (!ext4_check_dir_entry("empty_dir", inode, de, bh, offset)) {
+		if (ext4_check_dir_entry("empty_dir", inode, de, bh, bh->b_data,
+					bh->b_size, offset)) {
 			de = (struct ext4_dir_entry_2 *)(bh->b_data +
 							 sb->s_blocksize);
 			offset = (offset | (sb->s_blocksize - 1)) + 1;
