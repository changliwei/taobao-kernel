From: Michal Hocko <mhocko@suse.cz>
Subject: [PATCH 1/7] nohz: Fix update_ts_time_stat idle accounting
Patch-mainline: v3.1-rc1+
Reference: BF#152721

nohz: Fix update_ts_time_stat idle accounting

update_ts_time_stat currently updates idle time even if we are in
iowait loop at the moment. The only real users of the idle counter
(via get_cpu_idle_time_us) are CPU governors and they expect to get
cumulative time for both idle and iowait times.
The value (idle_sleeptime) is also printed to userspace by print_cpu
but it prints both idle and iowait times so the idle part is misleading.

Let's clean this up and fix update_ts_time_stat to account both counters
properly and update consumers of idle to consider iowait time as well.
If we do this we might use get_cpu_{idle,iowait}_time_us from other
contexts as well and we will get expected values.

[Notes from Zheng Liu]
This patchset can solve the problem, which top(1) displays cpu idle incorrect.
This bug has submitted to redhat (id: 760479).

Signed-off-by: Michal Hocko <mhocko@suse.cz>
Cc: Dave Jones <davej@redhat.com>
Cc: Arnd Bergmann <arnd@arndb.de>
Cc: Alexey Dobriyan <adobriyan@gmail.com>
Link: http://lkml.kernel.org/r/e9c909c221a8da402c4da07e4cd968c3218f8eb1.1314172057.git.mhocko@suse.cz
Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
Signed-off-by: Zheng Liu <wenqing.lz@taobao.com>
---
Index: linux-2.6.32-131.21.1.el5/drivers/cpufreq/cpufreq_conservative.c
===================================================================
--- linux-2.6.32-131.21.1.el5.orig/drivers/cpufreq/cpufreq_conservative.c
+++ linux-2.6.32-131.21.1.el5/drivers/cpufreq/cpufreq_conservative.c
@@ -123,10 +123,12 @@ static inline cputime64_t get_cpu_idle_t
 
 static inline cputime64_t get_cpu_idle_time(unsigned int cpu, cputime64_t *wall)
 {
-	u64 idle_time = get_cpu_idle_time_us(cpu, wall);
+	u64 idle_time = get_cpu_idle_time_us(cpu, NULL);
 
 	if (idle_time == -1ULL)
 		return get_cpu_idle_time_jiffy(cpu, wall);
+	else
+		idle_time += get_cpu_iowait_time_us(cpu, wall);
 
 	return idle_time;
 }
Index: linux-2.6.32-131.21.1.el5/drivers/cpufreq/cpufreq_ondemand.c
===================================================================
--- linux-2.6.32-131.21.1.el5.orig/drivers/cpufreq/cpufreq_ondemand.c
+++ linux-2.6.32-131.21.1.el5/drivers/cpufreq/cpufreq_ondemand.c
@@ -142,10 +142,12 @@ static inline cputime64_t get_cpu_idle_t
 
 static inline cputime64_t get_cpu_idle_time(unsigned int cpu, cputime64_t *wall)
 {
-	u64 idle_time = get_cpu_idle_time_us(cpu, wall);
+	u64 idle_time = get_cpu_idle_time_us(cpu, NULL);
 
 	if (idle_time == -1ULL)
 		return get_cpu_idle_time_jiffy(cpu, wall);
+	else
+		idle_time += get_cpu_iowait_time_us(cpu, wall);
 
 	return idle_time;
 }
Index: linux-2.6.32-131.21.1.el5/kernel/time/tick-sched.c
===================================================================
--- linux-2.6.32-131.21.1.el5.orig/kernel/time/tick-sched.c
+++ linux-2.6.32-131.21.1.el5/kernel/time/tick-sched.c
@@ -160,9 +160,10 @@ update_ts_time_stats(struct tick_sched *
 
 	if (ts->idle_active) {
 		delta = ktime_sub(now, ts->idle_entrytime);
-		ts->idle_sleeptime = ktime_add(ts->idle_sleeptime, delta);
 		if (nr_iowait_cpu() > 0)
 			ts->iowait_sleeptime = ktime_add(ts->iowait_sleeptime, delta);
+		else
+			ts->idle_sleeptime = ktime_add(ts->idle_sleeptime, delta);
 		ts->idle_entrytime = now;
 	}
 
@@ -200,8 +201,7 @@ static ktime_t tick_nohz_start_idle(stru
  * @last_update_time: variable to store update time in
  *
  * Return the cummulative idle time (since boot) for a given
- * CPU, in microseconds. The idle time returned includes
- * the iowait time (unlike what "top" and co report).
+ * CPU, in microseconds.
  *
  * This time is measured via accounting rather than sampling,
  * and is as accurate as ktime_get() is.
@@ -221,7 +221,7 @@ u64 get_cpu_idle_time_us(int cpu, u64 *l
 }
 EXPORT_SYMBOL_GPL(get_cpu_idle_time_us);
 
-/*
+/**
  * get_cpu_iowait_time_us - get the total iowait time of a cpu
  * @cpu: CPU number to query
  * @last_update_time: variable to store update time in
