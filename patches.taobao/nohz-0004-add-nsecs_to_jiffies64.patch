From: Coly Li <bosong.ly@taobao.com>
Subject: [PATCH 4/7] backport: add nsecs_to_jiffies64() and nsecs_to_jiffies()
Date: Tue Mar 20 15:46:13 CST 2012
Reference: BF#152721
Patch-mainline: 2.6.38

The next nohz patch which fixes idle and iowait time overflow uses
nesecs_to_jiffies64(). RHEL6 kernel does not have the implementation
yet. This patch backports nsecs_to_jiffies64() and nsecs_to_jiffies()
from upstream code.

Signed-off-by: Coly Li <bosong.ly@taobao.com>
---
Index: linux-2.6.32-220.7.1.el5/include/linux/jiffies.h
===================================================================
--- linux-2.6.32-220.7.1.el5.orig/include/linux/jiffies.h	2012-03-20 14:05:51.539204601 +0800
+++ linux-2.6.32-220.7.1.el5/include/linux/jiffies.h	2012-03-20 15:38:41.190823014 +0800
@@ -307,7 +307,8 @@
 extern unsigned long clock_t_to_jiffies(unsigned long x);
 extern u64 jiffies_64_to_clock_t(u64 x);
 extern u64 nsec_to_clock_t(u64 x);
-
+extern u64 nsecs_to_jiffies64(u64 n);
+extern unsigned long nsecs_to_jiffies(u64 n);
 #define TIMESTAMP_SIZE	30
 
 #endif
Index: linux-2.6.32-220.7.1.el5/kernel/time.c
===================================================================
--- linux-2.6.32-220.7.1.el5.orig/kernel/time.c	2012-03-20 14:05:52.255208152 +0800
+++ linux-2.6.32-220.7.1.el5/kernel/time.c	2012-03-20 15:40:37.051397529 +0800
@@ -662,6 +662,55 @@
 #endif
 }
 
+/**
+ * nsecs_to_jiffies64 - Convert nsecs in u64 to jiffies64
+ *
+ * @n:  nsecs in u64
+ *
+ * Unlike {m,u}secs_to_jiffies, type of input is not unsigned int but u64.
+ * And this doesn't return MAX_JIFFY_OFFSET since this function is designed
+ * for scheduler, not for use in device drivers to calculate timeout value.
+ *
+ * note:
+ *   NSEC_PER_SEC = 10^9 = (5^9 * 2^9) = (1953125 * 512)
+ *   ULLONG_MAX ns = 18446744073.709551615 secs = about 584 years
+ */
+u64 nsecs_to_jiffies64(u64 n)
+{
+#if (NSEC_PER_SEC % HZ) == 0
+	/* Common case, HZ = 100, 128, 200, 250, 256, 500, 512, 1000 etc. */
+	return div_u64(n, NSEC_PER_SEC / HZ);
+#elif (HZ % 512) == 0
+	/* overflow after 292 years if HZ = 1024 */
+	return div_u64(n * HZ / 512, NSEC_PER_SEC / 512);
+#else
+	/*
+	 * Generic case - optimized for cases where HZ is a multiple of 3.
+	 * overflow after 64.99 years, exact for HZ = 60, 72, 90, 120 etc.
+	*/
+	return div_u64(n * 9, (9ull * NSEC_PER_SEC + HZ / 2) / HZ);
+#endif
+}
+
+/**
+ * nsecs_to_jiffies - Convert nsecs in u64 to jiffies
+ *
+ * @n:  nsecs in u64
+ *
+ * Unlike {m,u}secs_to_jiffies, type of input is not unsigned int but u64.
+ * And this doesn't return MAX_JIFFY_OFFSET since this function is designed
+ * for scheduler, not for use in device drivers to calculate timeout value.
+ *
+ * note:
+ *   NSEC_PER_SEC = 10^9 = (5^9 * 2^9) = (1953125 * 512)
+ *   ULLONG_MAX ns = 18446744073.709551615 secs = about 584 years
+ */
+unsigned long nsecs_to_jiffies(u64 n)
+{
+	return (unsigned long)nsecs_to_jiffies64(n);
+}
+
+
 #if (BITS_PER_LONG < 64)
 u64 get_jiffies_64(void)
 {
