commit 8b472d739b2ddd8ab7fb278874f696cd95b25a5e
From: Curt Wohlgemuth <curtw@google.com>
Date:   Sat Apr 3 16:45:06 2010 -0400
Subject: ext4: Fix possible lost inode write in no journal mode
Patch-mainline: 2.6.34
    
    In the no-journal case, ext4_write_inode() will fetch the bh and call
    sync_dirty_buffer() on it.  However, if the bh has already been
    written and the bh reclaimed for some other purpose, AND if the inode
    is the only one in the inode table block in use, then
    ext4_get_inode_loc() will not read the inode table block from disk,
    but as an optimization, fill the block with zero's assuming that its
    caller will copy in the on-disk version of the inode.  This is not
    done by ext4_write_inode(), so the contents of the inode can simply
    get lost.  The fix is to use __ext4_get_inode_loc() with in_mem set to
    0, instead of ext4_get_inode_loc().  Long term the API needs to be
    fixed so it's obvious why latter is not safe.
    
    Addresses-Google-Bug: #2526446
    
Signed-off-by: Curt Wohlgemuth <curtw@google.com>
Signed-off-by: "Theodore Ts'o" <tytso@mit.edu>
Signed-off-by: Coly Li <bosong.ly@taobao.com>
---
 fs/ext4/inode.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)

Index: linux-2.6.32-71.29.1.el6/fs/ext4/inode.c
===================================================================
--- linux-2.6.32-71.29.1.el6.orig/fs/ext4/inode.c
+++ linux-2.6.32-71.29.1.el6/fs/ext4/inode.c
@@ -5418,7 +5418,7 @@ int ext4_write_inode(struct inode *inode
 	} else {
 		struct ext4_iloc iloc;
 
-		err = ext4_get_inode_loc(inode, &iloc);
+		err = __ext4_get_inode_loc(inode, &iloc, 0);
 		if (err)
 			return err;
 		if (wbc->sync_mode == WB_SYNC_ALL)
