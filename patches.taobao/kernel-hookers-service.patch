From: Bing Tian <bingtian.ly@taobao.com>
Subject: [PATCH] kernel hookers service
Patch-mainline: in-house

The hookers service allows hooker function pointers to be replaced and
restored in any order. See include/linux/hookers.h for API details.

This is the version 3 of hookers service. There is no any feature change,
just contains some coding style fixes, e.g. rename poor variable name.

Signed-off-by: Bing Tian <bingtian.ly@taobao.com>
Signed-off-by: Coly Li <bosong.ly@taobao.com>
---
diff --git a/arch/Kconfig b/arch/Kconfig
index cdea504..02f0301 100644
--- a/arch/Kconfig
+++ b/arch/Kconfig
@@ -140,4 +140,11 @@ config HAVE_PERF_EVENTS_NMI
 	  subsystem.  Also has support for calculating CPU cycle events
 	  to determine how many clock cycles in a given period.
 
+config HOOKERS
+	tristate "Hooker service"
+	default m
+	help
+	  Allow replacing and restore the function pointer in any order.
+	  See include/linux/hookers.h for details.
+
 source "kernel/gcov/Kconfig"
diff --git a/include/linux/hookers.h b/include/linux/hookers.h
new file mode 100644
index 0000000..570e2ab
--- /dev/null
+++ b/include/linux/hookers.h
@@ -0,0 +1,152 @@
+/*
+ *      This program is free software; you can redistribute it and/or
+ *      modify it under the terms of the GNU General Public License
+ *      as published by the Free Software Foundation; either version
+ *      2 of the License, or (at your option) any later version.
+ *
+ *	Changes:
+ *		Li Yu :		Starting up.
+ */
+
+#ifndef _LINUX_HOOKER_H_
+#define _LINUX_HOOKER_H_
+
+#include <linux/types.h>
+
+struct hooked_place;
+
+/*
+ * This API allows us replace and restore the function pointer in any order.
+ *
+ * This is designed to satisfy hooker stack usage pattern. e.g.
+ *
+ *	In our TCP implemention, icsk_af_ops->syn_recv_sock is called
+ *	when thea three way handshake has completed, we need to hook it
+ *      sometimes, e.g. to compute some statistics data on fly, even to
+ *      add a private TCP option.
+ *
+ *  By hooking this function, we can attain the goal without any kernel
+ *  change or just some small changes, and hope that this can help to
+ *  reduce the cost of maintaining custom kernel release too. Of course,
+ *  this can't replace that design necessary extendible framework, but I
+ *  think that hooking is a good and cheep choice of starting all.
+ *
+ *	Assume that we have two hooks, we expect that the hooking could
+ *      produce below behavior:
+ *
+ *	First, install two hookers:
+ *
+ *          install(&syn_recv_sock, hook1)
+ *          install(&syn_recv_sock, hook2)
+ *
+ *	Now, we expect the invoking order is:
+ *
+ *	     orig_syn_recv_sock() , hook2() , hook1()
+ *
+ *	Then, remove a hooker:
+ *
+ *          uninstall(&syn_recv_sock, hook1)
+ *
+ *      Then, the invoking order should be:
+ *
+ *	   orig_syn_recv_sock(), hook2()
+ *
+ *	Last, remove all rest hookers:
+ *
+ *          uninstall(&syn_recv_sock, hook2)
+ *
+ *      The result just is:
+ *
+ *	    orig_syn_recv_sock()
+ *
+ *      See, it is function pointer stack here. however, if we just simplely
+ *	used address of hooker1 in "top" hooker function (hooker2),
+ *	we will get an invalid memory access exception when prior hookers
+ *      (hooker1) is uninstalled first. Under second simple design, we just
+ *      support the some fixed predefined hooking addresses, and manage hookers
+ *      by a simple linked list.
+ *
+ *
+ * Usage:
+ *
+ *	1. Install a hooker on address which you are interesting in.
+ *	   Assume that the kernel has a callback table as below:
+ *
+ *		struct icsk_ops {
+ *			...
+			 *int (*foo)(int a, char b);
+ *			...
+ *		};
+ *
+ *		struct icsk_ops icsk_ops = {
+ *			...
+ *			.foo = real_foo,
+ *			...
+ *		};
+ *
+ *	   Then we should hook &icsk_ops.foo by such way:
+ *
+ *		static int foo_hooker(int a, char b, int *p_ret)
+ *		{
+ *			int ret = *p_ret;
+ *
+ *			//do something that may overwrite return value.
+ *			//p_ret saves the result value of original function
+ *			//or other hookers.
+ *
+ *			//You should not have any assume for invoking order
+ *			//of hookers.
+ *
+ *			return ret;
+ *		}
+ *
+ *		struct hooker h = {
+ *			.func = foo_hooker,
+ *		};
+ *
+ *		hooker_install(&icsk_ops.foo ,&h);
+ *
+ *		The hooker and original function has same function signature, if
+ *		the original function has not return value, IOW, it's like
+ *
+ *			void foo(int a, char b) { ... }
+ *
+ *	2. Uninstall hooker is easy, just:
+ *
+ *		hooker_uninstall(&h);
+ *
+ */
+
+struct hooker {
+	struct hooked_place *hplace;
+	void *func;	/* the installed hooker function pointer */
+	struct list_head chain;
+};
+
+/*
+ * Install the hooker function at specified address.
+ * This function may sleep.
+ *
+ * Parameters:
+ *	place - the address that saves function pointer
+ *	hooker - the hooker to install, the caller must fill
+ *		 its func member first
+ *
+ * Return:
+ *	    0  - All OK, please note that hooker func may be called before
+ *		 this return
+ *	  < 0 -  any error, e.g. out of memory, existing same installed hooker
+ */
+extern int hooker_install(void *place, struct hooker *hooker);
+
+/*
+ * Remove the installed hooker function that saved in hooker->func.
+ * This function may sleep.
+ *
+ * Parameters:
+ *	place - the address that saves function pointer
+ *	hooker - the installed hooker struct
+ */
+extern void hooker_uninstall(struct hooker *hooker);
+
+#endif
diff --git a/kernel/Makefile b/kernel/Makefile
index 9e1cc09..abda993 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -105,6 +105,7 @@ obj-$(CONFIG_SLOW_WORK) += slow-work.o
 obj-$(CONFIG_SLOW_WORK_DEBUG) += slow-work-debugfs.o
 obj-$(CONFIG_PERF_EVENTS) += events/
 obj-$(CONFIG_USER_RETURN_NOTIFIER) += user-return-notifier.o
+obj-$(CONFIG_HOOKERS) += hookers.o
 
 ifneq ($(CONFIG_SCHED_OMIT_FRAME_POINTER),y)
 # According to Alan Modra <alan@linuxcare.com.au>, the -fno-omit-frame-pointer is
diff --git a/kernel/hookers.c b/kernel/hookers.c
new file mode 100644
index 0000000..80a15d9
--- /dev/null
+++ b/kernel/hookers.c
@@ -0,0 +1,286 @@
+#include <linux/kernel.h>
+#include <linux/spinlock.h>
+#include <linux/module.h>
+#include <linux/rculist.h>
+#include <linux/slab.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+
+#include <linux/hookers.h>
+
+#include <net/net_namespace.h>
+#include <net/tcp.h>
+#include <net/transp_v6.h>
+#include <net/inet_common.h>
+#include <net/ipv6.h>
+#include <linux/inet.h>
+
+struct hooked_place {
+	char *name;	/* position information shown in procfs */
+	void *place;	/* the kernel address to be hook */
+	void *orig;	/* original content at hooked place */
+	void *stub;	/* hooker function stub */
+	int nr_hookers;	/* how many hookers are linked at below chain */
+	struct list_head chain;	/* hookers chain */
+};
+
+static spinlock_t hookers_lock;
+
+static struct sock *ipv4_specific_syn_recv_sock_stub(struct sock *sk,
+		struct sk_buff *skb, struct request_sock *req,
+		struct dst_entry *dst);
+static struct sock *ipv6_specific_syn_recv_sock_stub(struct sock *sk,
+		struct sk_buff *skb, struct request_sock *req,
+		struct dst_entry *dst);
+static struct sock *ipv6_mapped_syn_recv_sock_stub(struct sock *sk,
+		struct sk_buff *skb, struct request_sock *req,
+		struct dst_entry *dst);
+static int inet_stream_ops_getname_stub(struct socket *sock,
+		struct sockaddr *uaddr, int *uaddr_len, int peer);
+static int inet6_stream_ops_getname_stub(struct socket *sock,
+		struct sockaddr *uaddr, int *uaddr_len, int peer);
+
+static struct hooked_place place_table[] = {
+
+	{
+		.name = "ipv4_specific.syn_recv_sock",
+		.place = &ipv4_specific.syn_recv_sock,
+		.stub = ipv4_specific_syn_recv_sock_stub,
+	},
+
+	{
+		.name = "ipv6_specific.syn_recv_sock",
+		.place = &ipv6_specific.syn_recv_sock,
+		.stub = ipv6_specific_syn_recv_sock_stub,
+	},
+
+	{
+		.name = "ipv6_mapped.syn_recv_sock",
+		.place = &ipv6_mapped.syn_recv_sock,
+		.stub = ipv6_mapped_syn_recv_sock_stub,
+	},
+
+	{
+		.name = "inet_stream_ops.getname",
+		.place = &inet_stream_ops.getname,
+		.stub = inet_stream_ops_getname_stub,
+	},
+
+	{
+		.name = "inet6_stream_ops.getname",
+		.place = &inet6_stream_ops.getname,
+		.stub = inet6_stream_ops_getname_stub,
+	},
+
+};
+
+static struct sock *__syn_recv_sock_hstub(struct hooked_place *place,
+				struct sock *sk, struct sk_buff *skb,
+			  struct request_sock *req, struct dst_entry *dst)
+{
+	struct hooker *iter;
+	struct sock *(*hooker_func)(struct sock *sk, struct sk_buff *skb,
+		  struct request_sock *req, struct dst_entry *dst,
+						struct sock **ret);
+	struct sock *(*orig_func)(struct sock *sk, struct sk_buff *skb,
+		  struct request_sock *req, struct dst_entry *dst);
+	struct sock *ret;
+
+	orig_func = place->orig;
+	ret = orig_func(sk, skb, req, dst);
+
+	rcu_read_lock();
+	list_for_each_entry_rcu(iter, &place->chain, chain) {
+		hooker_func = iter->func;
+		hooker_func(sk, skb, req, dst, &ret);
+	}
+	rcu_read_unlock();
+
+	return ret;
+}
+
+static int __getname_hstub(struct hooked_place *place,
+				struct socket *sock, struct sockaddr *uaddr,
+						int *uaddr_len, int peer)
+{
+	struct hooker *iter;
+	int (*hooker_func)(struct socket *sock, struct sockaddr *uaddr,
+			 int *uaddr_len, int peer, int *ret);
+	int (*orig_func)(struct socket *sock, struct sockaddr *uaddr,
+			 int *uaddr_len, int peer);
+	int ret;
+
+	orig_func = place->orig;
+	ret = orig_func(sock, uaddr, uaddr_len, peer);
+
+	rcu_read_lock();
+	list_for_each_entry_rcu(iter, &place->chain, chain) {
+		hooker_func = iter->func;
+		hooker_func(sock, uaddr, uaddr_len, peer, &ret);
+	}
+	rcu_read_unlock();
+
+	return ret;
+}
+
+static struct sock *ipv4_specific_syn_recv_sock_stub(struct sock *sk,
+		struct sk_buff *skb, struct request_sock *req,
+		struct dst_entry *dst)
+{
+	return __syn_recv_sock_hstub(&place_table[0], sk, skb, req, dst);
+}
+
+static struct sock *ipv6_specific_syn_recv_sock_stub(struct sock *sk,
+		struct sk_buff *skb, struct request_sock *req,
+		struct dst_entry *dst)
+{
+	return __syn_recv_sock_hstub(&place_table[1], sk, skb, req, dst);
+}
+
+static struct sock *ipv6_mapped_syn_recv_sock_stub(struct sock *sk,
+		struct sk_buff *skb, struct request_sock *req,
+		struct dst_entry *dst)
+{
+	return __syn_recv_sock_hstub(&place_table[2], sk, skb, req, dst);
+}
+
+static int inet_stream_ops_getname_stub(struct socket *sock,
+		struct sockaddr *uaddr, int *uaddr_len, int peer)
+{
+	return __getname_hstub(&place_table[3], sock, uaddr, uaddr_len, peer);
+}
+
+static int inet6_stream_ops_getname_stub(struct socket *sock,
+		struct sockaddr *uaddr, int *uaddr_len, int peer)
+{
+	return __getname_hstub(&place_table[4], sock, uaddr, uaddr_len, peer);
+}
+
+#define PLACE_TABLE_SZ	(sizeof((place_table))/sizeof((place_table)[0]))
+
+int hooker_install(void *place, struct hooker *h)
+{
+	int i;
+	struct hooked_place *hplace;
+
+	might_sleep(); /* synchronize_rcu() */
+
+	if (!place || !h || !h->func)
+		return -EINVAL;
+
+	for (i = 0; i < PLACE_TABLE_SZ; i++) {
+		hplace = &place_table[i];
+		if (hplace->place == place) {
+			INIT_LIST_HEAD(&h->chain);
+			spin_lock(&hookers_lock);
+			hplace->nr_hookers++;
+			h->hplace = hplace;
+			list_add_tail_rcu(&h->chain, &place_table[i].chain);
+			spin_unlock(&hookers_lock);
+			synchronize_rcu();
+			break;
+		}
+	}
+
+	return (i >= PLACE_TABLE_SZ) ? -EINVAL : 0;
+}
+EXPORT_SYMBOL_GPL(hooker_install);
+
+void hooker_uninstall(struct hooker *h)
+{
+	might_sleep(); /* synchronize_rcu(); */
+
+	spin_lock(&hookers_lock);
+	list_del_rcu(&h->chain);
+	h->hplace->nr_hookers--;
+	h->hplace = NULL;
+	spin_unlock(&hookers_lock);
+	synchronize_rcu();
+}
+EXPORT_SYMBOL_GPL(hooker_uninstall);
+
+static void *hookers_seq_start(struct seq_file *seq, loff_t *pos)
+{
+	if (*pos < PLACE_TABLE_SZ)
+		return &place_table[*pos];
+	return NULL;
+}
+
+static void *hookers_seq_next(struct seq_file *seq, void *v, loff_t *pos)
+{
+	if (++(*pos) >= PLACE_TABLE_SZ)
+		return NULL;
+
+	return (void *)&place_table[*pos];
+}
+
+static void hookers_seq_stop(struct seq_file *seq, void *v)
+{
+}
+
+static int hookers_seq_show(struct seq_file *seq, void *v)
+{
+	struct hooked_place *hplace = (struct hooked_place *)v;
+
+	seq_printf(seq, "name:%-24s addr:0x%p hookers:%-10d\n",
+			hplace->name, hplace->place, hplace->nr_hookers);
+	return 0;
+}
+
+static const struct seq_operations hookers_seq_ops = {
+	.start = hookers_seq_start,
+	.next  = hookers_seq_next,
+	.stop  = hookers_seq_stop,
+	.show  = hookers_seq_show,
+};
+
+static int hookers_seq_open(struct inode *inode, struct file *file)
+{
+	return seq_open(file, &hookers_seq_ops);
+}
+
+static const struct file_operations hookers_seq_fops = {
+	.owner   = THIS_MODULE,
+	.open    = hookers_seq_open,
+	.read    = seq_read,
+	.llseek  = seq_lseek,
+	.release = seq_release,
+};
+
+static int hookers_init(void)
+{
+	int i;
+
+	if (!proc_create("hookers", 0, NULL, &hookers_seq_fops))
+		return -ENODEV;
+
+	spin_lock_init(&hookers_lock);
+	for (i = 0; i < PLACE_TABLE_SZ; i++) {
+		void **place = place_table[i].place;
+
+		place_table[i].orig = *place;
+		INIT_LIST_HEAD(&place_table[i].chain);
+		if (!place_table[i].stub)
+			break;
+		*place = place_table[i].stub;
+	}
+
+	return 0;
+}
+
+static void hookers_exit(void)
+{
+	int i;
+
+	remove_proc_entry("hookers", NULL);
+
+	for (i = 0; i < PLACE_TABLE_SZ; i++) {
+		void **place = place_table[i].place;
+		*place = place_table[i].orig;
+	}
+	synchronize_rcu();
+}
+
+module_init(hookers_init);
+module_exit(hookers_exit);
+MODULE_LICENSE("GPL");
