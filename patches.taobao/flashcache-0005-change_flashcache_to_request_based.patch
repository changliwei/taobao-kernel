From: Robin Dong <sanbai@taobao.com>
Subject: [PATCH 05/09] flashcache: add option for flashcache to change to request-based
Patch-mainline:

Add new interface for flashcache to change to request-based.

Signed-off-by: Robin Dong <sanbai@taobao.com>
---
Index: linux-2.6.32-279.9.1.el5/drivers/md/flashcache.h
===================================================================
--- linux-2.6.32-279.9.1.el5.orig/drivers/md/flashcache.h
+++ linux-2.6.32-279.9.1.el5/drivers/md/flashcache.h
@@ -517,6 +517,12 @@ struct dbn_index_pair {
 
 int flashcache_map(struct dm_target *ti, struct bio *bio,
 		   union map_info *map_context);
+int flashcache_iterate_devices(struct dm_target *ti,
+		iterate_devices_callout_fn fn, void *data);
+int flashcache_map_rq(struct dm_target *ti, struct request *clone,
+		union map_info *map_context);
+int flashcache_mk_rq(struct dm_target *ti, struct request_queue *q,
+		struct bio *bio);
 int flashcache_ctr(struct dm_target *ti, unsigned int argc,
 		   char **argv);
 void flashcache_dtr(struct dm_target *ti);
@@ -585,7 +591,7 @@ int dm_io_async_bvec(unsigned int num_re
 #endif
 			    int rw, 
 			    struct bio_vec *bvec, io_notify_fn fn, 
-			    void *context);
+			    void *context, int submit);
 #endif
 
 void flashcache_detect_fallow(struct cache_c *dmc, int index);
Index: linux-2.6.32-279.9.1.el5/drivers/md/flashcache_conf.c
===================================================================
--- linux-2.6.32-279.9.1.el5.orig/drivers/md/flashcache_conf.c
+++ linux-2.6.32-279.9.1.el5/drivers/md/flashcache_conf.c
@@ -89,6 +89,8 @@ static int flashcache_notify_reboot(stru
 				    unsigned long code, void *x);
 static void flashcache_sync_for_remove(struct cache_c *dmc);
 
+static int request_based = 0;
+
 extern char *flashcache_sw_version;
 
 static int
@@ -1535,6 +1537,19 @@ static struct target_type flashcache_tar
 	.ioctl 	= flashcache_ioctl,
 };
 
+static struct target_type flashcache_request_based_target = {
+	.name   = "flashcache",
+	.version= {1, 0, 3},
+	.module = THIS_MODULE,
+	.ctr    = flashcache_ctr,
+	.dtr    = flashcache_dtr,
+	.mk_rq	= flashcache_mk_rq,
+	.map_rq = flashcache_map_rq,
+	.status = flashcache_status,
+	.ioctl 	= flashcache_ioctl,
+	.iterate_devices = flashcache_iterate_devices,
+};
+
 static void
 flashcache_sync_for_remove(struct cache_c *dmc)
 {
@@ -1681,7 +1696,10 @@ flashcache_init(void)
 #endif
 	for (r = 0 ; r < 33 ; r++)
 		size_hist[r] = 0;
-	r = dm_register_target(&flashcache_target);
+	if (request_based == 1)
+		r = dm_register_target(&flashcache_request_based_target);
+	else
+		r = dm_register_target(&flashcache_target);
 	if (r < 0) {
 		DMERR("cache: register failed %d", r);
 	}
@@ -1702,13 +1720,20 @@ flashcache_init(void)
 void 
 flashcache_exit(void)
 {
+	struct target_type *target;
+
+	if (request_based == 1)
+		target = &flashcache_request_based_target;
+	else
+		target = &flashcache_target;
+
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,27)
-	int r = dm_unregister_target(&flashcache_target);
+	int r = dm_unregister_target(target);
 
 	if (r < 0)
 		DMERR("cache: unregister failed %d", r);
 #else
-	dm_unregister_target(&flashcache_target);
+	dm_unregister_target(target);
 #endif
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,26)
 	kcopyd_client_destroy(flashcache_kcp_client);
@@ -1733,6 +1758,8 @@ EXPORT_SYMBOL(flashcache_writeback_load)
 EXPORT_SYMBOL(flashcache_writeback_create);
 EXPORT_SYMBOL(flashcache_writeback_md_store);
 
+MODULE_PARM_DESC(request_based, "Whether the flashcache is request-based");
+module_param(request_based, int, 0644);
 MODULE_DESCRIPTION(DM_NAME " Facebook flash cache target");
 MODULE_AUTHOR("Mohan - based on code by Ming");
 MODULE_LICENSE("GPL");
Index: linux-2.6.32-279.9.1.el5/drivers/md/flashcache_main.c
===================================================================
--- linux-2.6.32-279.9.1.el5.orig/drivers/md/flashcache_main.c
+++ linux-2.6.32-279.9.1.el5/drivers/md/flashcache_main.c
@@ -79,12 +79,13 @@
 char *flashcache_sw_version = FLASHCACHE_SW_VERSION;
 
 static void flashcache_read_miss(struct cache_c *dmc, struct bio* bio,
-				 int index);
-static void flashcache_write(struct cache_c *dmc, struct bio* bio);
+				 int index, int submit);
+static void flashcache_write(struct cache_c *dmc, struct bio* bio, int submit);
 static int flashcache_inval_blocks(struct cache_c *dmc, struct bio *bio);
 static void flashcache_dirty_writeback(struct cache_c *dmc, int index);
 void flashcache_sync_blocks(struct cache_c *dmc);
-static void flashcache_start_uncached_io(struct cache_c *dmc, struct bio *bio);
+static void flashcache_start_uncached_io(struct cache_c *dmc,
+		struct bio *bio, int submit);
 
 extern struct work_struct _kcached_wq;
 extern u_int64_t size_hist[];
@@ -108,9 +109,13 @@ int dm_io_async_bvec(unsigned int num_re
 #endif
 			    int rw, 
 			    struct bio_vec *bvec, io_notify_fn fn, 
-			    void *context)
+			    void *context, int submit)
 {
 	struct dm_io_request iorq;
+	struct bio *bio, *next;
+	struct request_queue *q;
+	struct kcached_job *job = (struct kcached_job *) context;
+	int ret;
 
 	iorq.bi_rw = rw;
 	iorq.mem.type = DM_IO_BVEC;
@@ -118,7 +123,23 @@ int dm_io_async_bvec(unsigned int num_re
 	iorq.notify.fn = fn;
 	iorq.notify.context = context;
 	iorq.client = flashcache_io_client;
-	return dm_io(&iorq, num_regions, where, NULL);
+	if (job->bio && job->bio->bi_bdev && !submit)
+		iorq.only_create_bio = 1;
+	else
+		iorq.only_create_bio = 0;
+	iorq.start = iorq.end = NULL;
+	ret = dm_io(&iorq, num_regions, where, NULL);
+	if (job->bio && job->bio->bi_bdev) {
+		q = bdev_get_queue(job->bio->bi_bdev);
+		bio = iorq.start;
+		while (bio) {
+			next = bio->bi_next;
+			bio->bi_next = NULL;
+			__make_request(q, bio);
+			bio = next;
+		}
+	}
+	return ret;
 }
 #endif
 
@@ -421,7 +442,7 @@ flashcache_do_pending_noerror(struct kca
 			DPRINTK("flashcache_do_pending: Sending down IO %llu",
 				pending_job->bio->bi_sector);
 			/* Start uncached IO */
-			flashcache_start_uncached_io(dmc, pending_job->bio);
+			flashcache_start_uncached_io(dmc, pending_job->bio, 1);
 			flashcache_free_pending_job(pending_job);
 			spin_lock_irqsave(&dmc->cache_spin_lock, flags);
 		}
@@ -459,7 +480,7 @@ flashcache_do_io(struct kcached_job *job
 	/* Write to cache device */
 	job->dmc->flashcache_stats.ssd_writes++;
 	r = dm_io_async_bvec(1, &job->job_io_regions.cache, WRITE, bio->bi_io_vec + bio->bi_idx,
-			     flashcache_io_callback, job);
+			     flashcache_io_callback, job, 1);
 	VERIFY(r == 0);
 	/* In our case, dm_io_async_bvec() must always return 0 */
 }
@@ -737,7 +758,7 @@ flashcache_md_write_kickoff(struct kcach
 	dmc->flashcache_stats.md_ssd_writes++;
 	dm_io_async_bvec(1, &where, WRITE,
 			 &orig_job->md_io_bvec,
-			 flashcache_md_write_callback, orig_job);
+			 flashcache_md_write_callback, orig_job, 1);
 }
 
 void
@@ -1196,7 +1217,7 @@ out:
 }
 
 static void
-flashcache_read_hit(struct cache_c *dmc, struct bio* bio, int index)
+flashcache_read_hit(struct cache_c *dmc, struct bio* bio, int index, int submit)
 {
 	struct cacheblock *cacheblk;
 	struct pending_job *pjob;
@@ -1237,7 +1258,7 @@ flashcache_read_hit(struct cache_c *dmc,
 			dmc->flashcache_stats.ssd_reads++;
 			dm_io_async_bvec(1, &job->job_io_regions.cache, READ,
 					 bio->bi_io_vec + bio->bi_idx,
-					 flashcache_io_callback, job);
+					 flashcache_io_callback, job, submit);
 		}
 	} else {
 		pjob = flashcache_alloc_pending_job(dmc);
@@ -1258,7 +1279,7 @@ flashcache_read_hit(struct cache_c *dmc,
 
 static void
 flashcache_read_miss(struct cache_c *dmc, struct bio* bio,
-		     int index)
+		     int index, int submit)
 {
 	struct kcached_job *job;
 	struct cacheblock *cacheblk = &dmc->cache[index];
@@ -1292,13 +1313,13 @@ flashcache_read_miss(struct cache_c *dmc
 		dmc->flashcache_stats.disk_reads++;
 		dm_io_async_bvec(1, &job->job_io_regions.disk, READ,
 				 bio->bi_io_vec + bio->bi_idx,
-				 flashcache_io_callback, job);
+				 flashcache_io_callback, job, submit);
 		flashcache_clean_set(dmc, index / dmc->assoc);
 	}
 }
 
 static void
-flashcache_read(struct cache_c *dmc, struct bio *bio)
+flashcache_read(struct cache_c *dmc, struct bio *bio, int submit)
 {
 	int index;
 	int res;
@@ -1316,7 +1337,7 @@ flashcache_read(struct cache_c *dmc, str
 		cacheblk = &dmc->cache[index];
 		if ((cacheblk->cache_state & VALID) && 
 		    (cacheblk->dbn == bio->bi_sector)) {
-			flashcache_read_hit(dmc, bio, index);
+			flashcache_read_hit(dmc, bio, index, submit);
 			return;
 		}
 	}
@@ -1340,7 +1361,7 @@ flashcache_read(struct cache_c *dmc, str
 		if (res == -1)
 			flashcache_clean_set(dmc, hash_block(dmc, bio->bi_sector));
 		/* Start uncached IO */
-		flashcache_start_uncached_io(dmc, bio);
+		flashcache_start_uncached_io(dmc, bio, submit);
 		return;
 	}
 	/* 
@@ -1358,7 +1379,7 @@ flashcache_read(struct cache_c *dmc, str
 
 	DPRINTK("Cache read: Block %llu(%lu), index = %d:%s",
 		bio->bi_sector, bio->bi_size, index, "CACHE MISS & REPLACE");
-	flashcache_read_miss(dmc, bio, index);
+	flashcache_read_miss(dmc, bio, index, submit);
 }
 
 /*
@@ -1486,7 +1507,7 @@ out:
 }
 
 static void
-flashcache_write_miss(struct cache_c *dmc, struct bio *bio, int index)
+flashcache_write_miss(struct cache_c *dmc, struct bio *bio, int index, int submit)
 {
 	struct cacheblock *cacheblk;
 	struct kcached_job *job;
@@ -1538,7 +1559,7 @@ flashcache_write_miss(struct cache_c *dm
 			/* Write data to the cache */		
 			dm_io_async_bvec(1, &job->job_io_regions.cache, WRITE, 
 					 bio->bi_io_vec + bio->bi_idx,
-					 flashcache_io_callback, job);
+					 flashcache_io_callback, job, submit);
 		} else {
 			VERIFY(dmc->cache_mode == FLASHCACHE_WRITE_THROUGH);
 			/* Write data to both disk and cache */
@@ -1550,14 +1571,14 @@ flashcache_write_miss(struct cache_c *dm
 #endif
 					 WRITE, 
 					 bio->bi_io_vec + bio->bi_idx,
-					 flashcache_io_callback, job);
+					 flashcache_io_callback, job, submit);
 		}
 		flashcache_clean_set(dmc, index / dmc->assoc);
 	}
 }
 
 static void
-flashcache_write_hit(struct cache_c *dmc, struct bio *bio, int index)
+flashcache_write_hit(struct cache_c *dmc, struct bio *bio, int index, int submit)
 {
 	struct cacheblock *cacheblk;
 	struct pending_job *pjob;
@@ -1599,7 +1620,7 @@ flashcache_write_hit(struct cache_c *dmc
 				/* Write data to the cache */
 				dm_io_async_bvec(1, &job->job_io_regions.cache, WRITE, 
 						 bio->bi_io_vec + bio->bi_idx,
-						 flashcache_io_callback, job);
+						 flashcache_io_callback, job, submit);
 				flashcache_clean_set(dmc, index / dmc->assoc);
 			} else {
 				VERIFY(dmc->cache_mode == FLASHCACHE_WRITE_THROUGH);
@@ -1613,7 +1634,7 @@ flashcache_write_hit(struct cache_c *dmc
 #endif
 						 WRITE, 
 						 bio->bi_io_vec + bio->bi_idx,
-						 flashcache_io_callback, job);				
+						 flashcache_io_callback, job, submit);				
 			}
 		}
 	} else {
@@ -1634,7 +1655,7 @@ flashcache_write_hit(struct cache_c *dmc
 }
 
 static void
-flashcache_write(struct cache_c *dmc, struct bio *bio)
+flashcache_write(struct cache_c *dmc, struct bio *bio, int submit)
 {
 	int index;
 	int res;
@@ -1649,10 +1670,10 @@ flashcache_write(struct cache_c *dmc, st
 		if ((cacheblk->cache_state & VALID) && 
 		    (cacheblk->dbn == bio->bi_sector)) {
 			/* Cache Hit */
-			flashcache_write_hit(dmc, bio, index);
+			flashcache_write_hit(dmc, bio, index, submit);
 		} else {
 			/* Cache Miss, found block to recycle */
-			flashcache_write_miss(dmc, bio, index);
+			flashcache_write_miss(dmc, bio, index, submit);
 		}
 		return;
 	}
@@ -1669,7 +1690,7 @@ flashcache_write(struct cache_c *dmc, st
 		return;
 	}
 	/* Start uncached IO */
-	flashcache_start_uncached_io(dmc, bio);
+	flashcache_start_uncached_io(dmc, bio, submit);
 	flashcache_clean_set(dmc, hash_block(dmc, bio->bi_sector));
 }
 
@@ -1685,6 +1706,48 @@ flashcache_write(struct cache_c *dmc, st
 #endif
 #endif
 
+int flashcache_iterate_devices(struct dm_target *ti,
+		iterate_devices_callout_fn fn, void *data)
+{
+	struct cache_c *dmc = (struct cache_c *) ti->private;
+
+	return fn(ti, dmc->disk_dev, 0, 0, data);
+}
+
+static inline void blk_partition_remap(struct bio *bio)
+{
+	struct block_device *bdev = bio->bi_bdev;
+
+	if (bio_sectors(bio) && bdev != bdev->bd_contains) {
+		struct hd_struct *p = bdev->bd_part;
+
+		bio->bi_sector += p->start_sect;
+		bio->bi_bdev = bdev->bd_contains;
+	}
+}
+
+int
+flashcache_map_rq(struct dm_target *ti, struct request *clone,
+		union map_info *map_context)
+{
+	struct bio *bio = clone->bio;
+	struct block_device *bdev;
+
+	while (bio) {
+		blk_partition_remap(bio);
+		bio = bio->bi_next;
+	}
+	
+	bio = clone->bio;
+	if (bio) {
+		bdev = bio->bi_bdev;
+		clone->__sector = bio->bi_sector;
+		clone->q = bdev_get_queue(bdev);
+		clone->rq_disk = bdev->bd_disk;
+	}
+	return DM_MAPIO_REMAPPED;
+}
+
 /*
  * Decide the mapping and perform necessary cache operations for a bio request.
  */
@@ -1723,18 +1786,65 @@ flashcache_map(struct dm_target *ti, str
 				flashcache_bio_endio(bio, -EIO, dmc, NULL);
 		} else {
 			/* Start uncached IO */
-			flashcache_start_uncached_io(dmc, bio);
+			flashcache_start_uncached_io(dmc, bio, 1);
 		}
 	} else {
 		spin_unlock_irq(&dmc->cache_spin_lock);		
 		if (bio_data_dir(bio) == READ)
-			flashcache_read(dmc, bio);
+			flashcache_read(dmc, bio, 1);
 		else
-			flashcache_write(dmc, bio);
+			flashcache_write(dmc, bio, 1);
 	}
 	return DM_MAPIO_SUBMITTED;
 }
 
+/* Make lower-device request from flashcache-dev's bio. */
+int 
+flashcache_mk_rq(struct dm_target *ti, struct request_queue *q, struct bio *bio)
+{
+	struct cache_c *dmc = (struct cache_c *) ti->private;
+	int sectors = to_sector(bio->bi_size);
+	int queued;
+	
+	if (sectors <= 32)
+		size_hist[sectors]++;
+
+	if (bio_barrier(bio))
+		return -EOPNOTSUPP;
+
+	VERIFY(to_sector(bio->bi_size) <= dmc->block_size);
+
+	if (bio_data_dir(bio) == READ)
+		dmc->flashcache_stats.reads++;
+	else
+		dmc->flashcache_stats.writes++;
+
+	spin_lock_irq(&dmc->cache_spin_lock);
+	if (unlikely(dmc->sysctl_pid_do_expiry && 
+		     (dmc->whitelist_head || dmc->blacklist_head)))
+		flashcache_pid_expiry_all_locked(dmc);
+	if ((to_sector(bio->bi_size) != dmc->block_size) ||
+	    (bio_data_dir(bio) == WRITE && 
+	     (dmc->cache_mode == FLASHCACHE_WRITE_AROUND || flashcache_uncacheable(dmc, bio)))) {
+		queued = flashcache_inval_blocks(dmc, bio);
+		spin_unlock_irq(&dmc->cache_spin_lock);
+		if (queued) {
+			if (unlikely(queued < 0))
+				flashcache_bio_endio(bio, -EIO, dmc, NULL);
+		} else {
+			/* Start uncached IO */
+			flashcache_start_uncached_io(dmc, bio, 0);
+		}
+	} else {
+		spin_unlock_irq(&dmc->cache_spin_lock);		
+		if (bio_data_dir(bio) == READ)
+			flashcache_read(dmc, bio, 0);
+		else
+			flashcache_write(dmc, bio, 0);
+	}
+	return 0;
+}
+
 /* Block sync support functions */
 static void 
 flashcache_kcopyd_callback_sync(int read_err, unsigned int write_err, void *context)
@@ -2002,7 +2112,7 @@ flashcache_uncached_io_callback(unsigned
 }
 
 static void
-flashcache_start_uncached_io(struct cache_c *dmc, struct bio *bio)
+flashcache_start_uncached_io(struct cache_c *dmc, struct bio *bio, int submit)
 {
 	int is_write = (bio_data_dir(bio) == WRITE);
 	struct kcached_job *job;
@@ -2023,7 +2133,7 @@ flashcache_start_uncached_io(struct cach
 	dm_io_async_bvec(1, &job->job_io_regions.disk,
 			 ((is_write) ? WRITE : READ), 
 			 bio->bi_io_vec + bio->bi_idx,
-			 flashcache_uncached_io_callback, job);
+			 flashcache_uncached_io_callback, job, submit);
 }
 
 EXPORT_SYMBOL(flashcache_io_callback);
@@ -2032,6 +2142,7 @@ EXPORT_SYMBOL(flashcache_do_pending_noer
 EXPORT_SYMBOL(flashcache_do_pending);
 EXPORT_SYMBOL(flashcache_do_io);
 EXPORT_SYMBOL(flashcache_map);
+EXPORT_SYMBOL(flashcache_mk_rq);
 EXPORT_SYMBOL(flashcache_write);
 EXPORT_SYMBOL(flashcache_inval_blocks);
 EXPORT_SYMBOL(flashcache_inval_block_set);
