From: Liu Yuan <taitai.ly@taobao.com>
Date: Fri, 4 Mar 2011 02:59:40 +0800
Subject: [PATCH 4/4] mm: Add readpages accounting
Patch-mainline: in-house
References: 

The _readpages_ counter simply counts how many pages the kernel
really request from the disk, either by readahead module or
aop->readpage() when readahead window equals 0.

This counter is request-centric and doesnot check read errors
since the read requests are issued to the block layer already.

Signed-off-by: Liu Yuan <tailai.ly@taobao.com>
Signed-off-by: Tao Ma <boyu.mt@taobao.com>
Acked-by: 

---
 mm/filemap.c   |    1 +
 mm/readahead.c |    2 ++
 2 files changed, 3 insertions(+), 0 deletions(-)

Index: linux-2.6.32-220.7.1.el5/mm/filemap.c
===================================================================
--- linux-2.6.32-220.7.1.el5.orig/mm/filemap.c	2012-03-09 12:12:57.682540191 +0800
+++ linux-2.6.32-220.7.1.el5/mm/filemap.c	2012-03-09 12:13:02.430563690 +0800
@@ -1166,6 +1166,7 @@
 		 */
 		ClearPageError(page);
 		/* Start the actual read. The read will unlock the page. */
+		trace_page_cache_acct_readpages(mapping->host->i_sb, 1);
 		error = mapping->a_ops->readpage(filp, page);
 
 		if (unlikely(error)) {
Index: linux-2.6.32-220.7.1.el5/mm/readahead.c
===================================================================
--- linux-2.6.32-220.7.1.el5.orig/mm/readahead.c	2012-03-09 12:12:18.410345430 +0800
+++ linux-2.6.32-220.7.1.el5/mm/readahead.c	2012-03-09 12:13:02.434563723 +0800
@@ -16,6 +16,7 @@
 #include <linux/task_io_accounting_ops.h>
 #include <linux/pagevec.h>
 #include <linux/pagemap.h>
+#include <trace/events/mm.h>
 
 /*
  * Initialise a struct file's readahead state.  Assumes that the caller has
@@ -111,6 +112,8 @@
 	unsigned page_idx;
 	int ret;
 
+	trace_page_cache_acct_readpages(mapping->host->i_sb, nr_pages);
+
 	if (mapping->a_ops->readpages) {
 		ret = mapping->a_ops->readpages(filp, mapping, pages, nr_pages);
 		/* Clean up the remaining pages */
