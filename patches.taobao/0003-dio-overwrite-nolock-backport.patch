From: Zheng Liu <wenqing.lz@taobao.com>
Subject: [PATCH 3/3] ext4: add dio overwrite nolock
Patch-mainline: v3.5-rc5-11-g4bd809d
Reference: 4bd809dbbf177ad0c450d702466b1da63e1b4b7e

Aligned and overwrite direct IO can be parallelized.  In ext4_file_dio_write,
we first check whether these conditions are satisfied or not.  If so, we unlock
the i_mutex and acquire i_data_sem directly in ext4_ext_direct_IO.  
'iocb->private' is set to indicate that this is a overwrite dio, and it will be
processed in ext4_ext_direct_IO.

Signed-off-by: Zheng Liu <wenqing.lz@taobao.com>
---
 fs/ext4/file.c  |   42 ++++++++++++++++++++++++++++++++++++++++--
 fs/ext4/inode.c |   25 +++++++++++++++++++++++--
 2 files changed, 63 insertions(+), 4 deletions(-)

Index: linux-2.6.32-279.2.1.el5/fs/ext4/file.c
===================================================================
--- linux-2.6.32-279.2.1.el5.orig/fs/ext4/file.c	2012-08-25 00:37:45.000000000 +0800
+++ linux-2.6.32-279.2.1.el5/fs/ext4/file.c	2012-08-25 00:37:48.000000000 +0800
@@ -92,9 +92,12 @@
 ext4_file_dio_write(struct kiocb *iocb, const struct iovec *iov,
 		    unsigned long nr_segs, loff_t pos)
 {
-	struct inode *inode = iocb->ki_filp->f_path.dentry->d_inode;
+	struct file *file = iocb->ki_filp;
+	struct inode *inode = file->f_mapping->host;
 	int unaligned_aio = 0;
 	ssize_t ret;
+	int overwrite = 0;
+	size_t length = iov_length(iov, nr_segs);
 
 	if (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS) &&
 	    !is_sync_kiocb(iocb))
@@ -115,7 +118,42 @@
 		ext4_aiodio_wait(inode);
  	}
 
-	ret = generic_file_aio_write(iocb, iov, nr_segs, pos);
+	BUG_ON(iocb->ki_pos != pos);
+
+	mutex_lock(&inode->i_mutex);
+
+	iocb->private = &overwrite;
+	/* check whether we do a DIO over write or not */
+	if (ext4_should_dioread_nolock(inode) && !unaligned_aio &&
+	    !file->f_mapping->nrpages && pos + length <= i_size_read(inode)) {
+		struct buffer_head bh;
+		struct ext4_map_blocks map;
+		unsigned int blkbits = inode->i_blkbits;
+		int err;
+		int len;
+
+		bh.b_state = 0;
+		map.m_flags = 0;
+		map.m_lblk = pos >> blkbits;
+		map.m_len = (EXT4_BLOCK_ALIGN(pos + length, blkbits) >> blkbits)
+			- map.m_lblk;
+		len = map.m_len;
+
+		err = ext4_get_blocks(NULL, inode, &map, &bh, 0);
+		if (err == len && (map.m_flags & EXT4_MAP_MAPPED))
+			overwrite = 1;
+	}
+
+	ret = __generic_file_aio_write(iocb, iov, nr_segs, &iocb->ki_pos);
+	mutex_unlock(&inode->i_mutex);
+
+	if (ret > 0 || ret == -EIOCBQUEUED) {
+		ssize_t err;
+
+		err = generic_write_sync(file, pos, ret);
+		if (err < 0 && ret > 0)
+			ret = err;
+	}
 
 	if (unaligned_aio)
 		mutex_unlock(&EXT4_I(inode)->i_aio_mutex);
Index: linux-2.6.32-279.2.1.el5/fs/ext4/inode.c
===================================================================
--- linux-2.6.32-279.2.1.el5.orig/fs/ext4/inode.c	2012-08-25 00:37:45.000000000 +0800
+++ linux-2.6.32-279.2.1.el5/fs/ext4/inode.c	2012-08-25 00:37:48.000000000 +0800
@@ -4381,6 +4381,18 @@
 	loff_t final_size = offset + count;
 	if (rw == WRITE && final_size <= inode->i_size) {
 		int overwrite = 0;
+		int *private_ptr = NULL;
+
+		BUG_ON(iocb->private == NULL);
+
+		/* If we do a over write dio, i_mutex locking can be unlocked */
+		private_ptr = (int *)iocb->private;
+		overwrite = *private_ptr;
+
+		if (overwrite) {
+			down_read(&EXT4_I(inode)->i_data_sem);
+			mutex_unlock(&inode->i_mutex);
+		}
 
 		/*
  		 * We could direct write to holes and fallocate.
@@ -4406,8 +4418,10 @@
 		EXT4_I(inode)->cur_aio_dio = NULL;
 		if (!is_sync_kiocb(iocb)) {
 			iocb->private = ext4_init_io_end(inode, GFP_NOFS);
-			if (!iocb->private)
-				return -ENOMEM;
+			if (!iocb->private) {
+				ret = -ENOMEM;
+				goto retake_lock;
+			}
 			/*
 			 * we save the io structure for current async
 			 * direct IO, so that later ext4_get_blocks()
@@ -4464,6 +4478,13 @@
 				ret = err;
 			ext4_clear_inode_state(inode, EXT4_STATE_DIO_UNWRITTEN);
 		}
+
+	retake_lock:
+		/* take the i_mutex locking again if we do a over write dio */
+		if (overwrite) {
+			up_read(&EXT4_I(inode)->i_data_sem);
+			mutex_lock(&inode->i_mutex);
+		}
 		return ret;
 	}
 
