From: Chenggang Qin <chenggang.qcg@taobao.com>
Date: Wed, 12 Sep 2012 21:04
Subject: [PATCH] perf, x86: Fix a build error on builtin-test
Patch-mainline: 2.6.32.279

Fixed a bug for detecting the version of GLibc. Thanks to Handai.

Recently I build perf and get a build error on builtin-test.c. The error is as
following:

$ make
Makefile:415: No libdw.h found or old libdw.h found or elfutils is older than 0.138, disables dwarf support. Please install new elfutils-devel/libdw-dev
Makefile:529: The path '/usr/bin/python-config' is not executable.
Makefile:533: No python-config tool was found
Makefile:533: Python support won't be built
Makefile:602: No bfd.h/libbfd found, install binutils-dev[el]/zlib-static to gain symbol demangling PERF_VERSION = 3.3.rc4.34.g71974
Makefile:415: No libdw.h found or old libdw.h found or elfutils is older than 0.138, disables dwarf support. Please install new elfutils-devel/libdw-dev
Makefile:529: The path '/usr/bin/python-config' is not executable.
Makefile:533: No python-config tool was found
Makefile:533: Python support won't be built
Makefile:602: No bfd.h/libbfd found, install binutils-dev[el]/zlib-static to gain symbol demangling
    CC perf.o
    CC builtin-test.o
cc1: warnings being treated as errors
builtin-test.c: In function ‘sched__get_first_possible_cpu’:
builtin-test.c:977: warning: implicit declaration of function ‘CPU_ALLOC’
builtin-test.c:977: warning: nested extern declaration of ‘CPU_ALLOC’
builtin-test.c:977: warning: assignment makes pointer from integer without a cast
builtin-test.c:978: warning: implicit declaration of function ‘CPU_ALLOC_SIZE’
builtin-test.c:978: warning: nested extern declaration of ‘CPU_ALLOC_SIZE’
builtin-test.c:979: warning: implicit declaration of function ‘CPU_ZERO_S’
builtin-test.c:979: warning: nested extern declaration of ‘CPU_ZERO_S’
builtin-test.c:982: warning: implicit declaration of function ‘CPU_FREE’
builtin-test.c:982: warning: nested extern declaration of ‘CPU_FREE’
builtin-test.c:992: warning: implicit declaration of function ‘CPU_ISSET_S’
builtin-test.c:992: warning: nested extern declaration of ‘CPU_ISSET_S’
builtin-test.c:998: warning: implicit declaration of function ‘CPU_CLR_S’
builtin-test.c:998: warning: nested extern declaration of ‘CPU_CLR_S’
make: *** [builtin-test.o] Error 1

This problem is introduced in 3e7c439a. CPU_ALLOC and related macros are
missing in sched__get_first_possible_cpu function. CPU_ALLOC and other 
related macros were introduced from GLibc 2.7. So, if we compile
buildin-test.c with Glibc whose version is earlier than GLibc 2.7. These
macros cannot be found. We fixed this problem by detecting the version of
Glibc, and added the definitions of these cpu set related macros in 
buildin-test.c while the Glibc is old version.

Cc: Arnaldo Carvalho de Melo <acme@redhat.com>
Cc: Ingo Molnar <mingo@elte.hu>
Cc: David Ahern <dsahern@gmail.com>
Cc: Frederic Weisbecker <fweisbec@gmail.com>
Cc: Mike Galbraith <efault@gmx.de>
Cc: Paul Mackerras <paulus@samba.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Stephane Eranian <eranian@google.com>
Signed-off-by: Zheng Liu <wenqing.lz@taobao.com>
Signed-off-by: Chenggang Qin <chenggang.qcg@taobao.com>



Index: tools/perf/builtin-test.c
===================================================================
--- a/tools/perf/builtin-test.c	2012-08-23 17:27:12.000000000 +0800
+++ b/tools/perf/builtin-test.c	2012-09-10 19:45:34.452813967 +0800
@@ -18,6 +18,70 @@
 #include "../../include/linux/hw_breakpoint.h"
 */
 
+#include <unistd.h>
+#include <sched.h>
+
+#ifndef __GLIBC_NO_CPU_ALLOC__
+#define __GLIBC_NO_CPU_ALLOC__
+#endif
+
+#if (__GLIBC__ == 2 && __GLIBC_MINOR__ >=7) || __GLIBC__ > 2
+        #undef __GLIBC_NO_CPU_ALLOC__
+#endif
+
+#ifdef __GLIBC_NO_CPU_ALLOC__
+
+#define CPU_SETSIZE __CPU_SETSIZE
+
+# define CPU_ALLOC_SIZE(count) \
+  ((((count) + __NCPUBITS - 1) / __NCPUBITS) * sizeof (__cpu_mask))
+
+static cpu_set_t * CPU_ALLOC(int nr_cpus)
+{
+        cpu_set_t *mask;
+        size_t mask_size = CPU_ALLOC_SIZE(nr_cpus);
+
+        mask = zalloc(mask_size * sizeof(cpu_set_t));
+        if (!mask) {
+                printf("No enough memory to allocate cpu mask!\n");
+                return NULL;
+        }
+        return mask;
+}
+
+static void CPU_ZERO_S(size_t size, cpu_set_t *mask)
+{
+        memset(mask, 0, size * sizeof(cpu_set_t));
+}
+
+static void CPU_FREE(cpu_set_t* cpu_set)
+{
+        if (cpu_set)
+                free(cpu_set);
+}
+
+# define __NCPUBITS     (8 * sizeof (__cpu_mask))
+
+# define __CPUMASK(cpu) ((__cpu_mask) 1 << ((cpu) % __NCPUBITS))
+
+# define CPU_ISSET_S(cpu, setsize, cpusetp) \
+  (__extension__                                                              \
+   ({ size_t __cpu = (cpu);                                                   \
+      __cpu < 8 * (setsize)                                                   \
+      ? ((((__const __cpu_mask *) ((cpusetp)->__bits))[__CPUELT (__cpu)]      \
+          & __CPUMASK (__cpu))) != 0                                          \
+      : 0; }))
+
+# define CPU_CLR_S(cpu, setsize, cpusetp) \
+  (__extension__                                                              \
+   ({ size_t __cpu = (cpu);                                                   \
+      __cpu < 8 * (setsize)                                                   \
+      ? (((__cpu_mask *) ((cpusetp)->__bits))[__CPUELT (__cpu)]               \
+         &= ~__CPUMASK (__cpu))                                               \
+      : 0; }))
+
+#endif
+
 static int vmlinux_matches_kallsyms_filter(struct map *map __used, struct symbol *sym)
 {
 	bool *visited = symbol__priv(sym);
