From:   Mike Waychison <mikew@google.com>
Date:   Mon Apr 25 13:48:51 2011 +0800
Subject: [PATCH 23/24] netoops: add a user programmable blob to the netoops_packet.
Patch-mainline: linux-2.6.32-71.18.1.el6

Signed-off-by: Mike Waychison <mikew@google.com>
Signed-off-by: Robin Dong <sanbai@taobao.com>
---
Index: linux-2.6.32-220.0.0.el5/drivers/net/netoops.c
===================================================================
--- linux-2.6.32-220.0.0.el5.orig/drivers/net/netoops.c	2011-12-21 22:41:47.000000000 +0800
+++ linux-2.6.32-220.0.0.el5/drivers/net/netoops.c	2011-12-21 22:41:47.000000000 +0800
@@ -29,6 +29,7 @@
 #define NETOOPS_VERSION 0x0003
 #define NETOOPS_PORT 2004
 #define NETOOPS_RETRANSMIT_COUNT 3
+#define NETOOPS_BLOB_BYTES (size_t)128
 
 static DEFINE_NETPOLL_TARGETS(targets);
 
@@ -97,6 +98,11 @@
 		 * termination not required.
 		 */
 		char kernel_version[64];
+		/*
+		 * Data that comes from userland.  Can be anything, but
+		 * is currently capped at NETOOPS_BLOB_BYTES.
+		 */
+		char user_blob[NETOOPS_BLOB_BYTES];
 	} __attribute__ ((packed)) header;
 	struct netoops_arch_data arch_data;
 	char data[NETOOPS_DATA_BYTES];
@@ -104,6 +110,8 @@
 
 static struct netoops_msg msg;
 
+static size_t netoops_user_blob_length;
+static char netoops_user_blob[NETOOPS_BLOB_BYTES];
 static u32 netoops_boot_id;
 
 static void setup_packet_header(int packet_count, struct pt_regs *regs,
@@ -120,6 +128,7 @@
 					  NETOOPS_TYPE_PRINTK_BUFFER);
 	h->packet_count = cpu_to_le32(packet_count);
 	h->boot_id = cpu_to_le32(netoops_boot_id);
+	memcpy(h->user_blob, netoops_user_blob, netoops_user_blob_length);
 	strncpy(h->kernel_version, utsname()->release,
 		min(sizeof(msg.header.kernel_version),
 		    sizeof(utsname()->release)));
@@ -224,10 +233,15 @@
 static ssize_t netoops_show(struct kobject *kobj,
 			    struct kobj_attribute *attr,
 			    char *buf) {
-	if (!strcmp(attr->attr.name, "netoops_boot_id"))
+	if (!strcmp(attr->attr.name, "netoops_user_blob")) {
+		memcpy(buf, netoops_user_blob, netoops_user_blob_length);
+		return netoops_user_blob_length;
+	}
+	if (!strcmp(attr->attr.name, "netoops_boot_id")) {
 		snprintf(buf, PAGE_SIZE, "%d\n", netoops_boot_id);
-	buf[PAGE_SIZE - 1] = '\0';
-	return strnlen(buf, PAGE_SIZE);
+		return strnlen(buf, PAGE_SIZE);
+	}
+	return -EINVAL;
 }
 
 static ssize_t netoops_store(struct kobject *kobj,
@@ -237,7 +251,10 @@
 	if (!count)
 		return count;
 
-	if (!strcmp(attr->attr.name, "netoops_boot_id")) {
+	if (!strcmp(attr->attr.name, "netoops_user_blob")) {
+		count = min(count, NETOOPS_BLOB_BYTES);
+		memcpy(netoops_user_blob, buf, count);
+	} else if (!strcmp(attr->attr.name, "netoops_boot_id")) {
 		unsigned long tmp;
 		if (strict_strtoul(buf, 0, &tmp))
 			return -EINVAL;
@@ -250,10 +267,13 @@
 	return count;
 }
 
+static struct kobj_attribute netoops_user_blob_attribute =
+	__ATTR(netoops_user_blob, 0644, netoops_show, netoops_store);
 static struct kobj_attribute netoops_boot_number_attribute =
 	__ATTR(netoops_boot_id, 0666, netoops_show, netoops_store);
 
 static struct attribute *attrs[] = {
+	&netoops_user_blob_attribute.attr,
 	&netoops_boot_number_attribute.attr,
 	NULL,
 };
